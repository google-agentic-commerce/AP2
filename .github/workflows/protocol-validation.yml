name: Protocol Enhancement Validation

on:
  push:
    branches: [ protocol/* ]
  pull_request:
    branches: [ main ]

jobs:
  validate-protocol-enhancement:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      working-directory: ./samples/python
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install pytest pytest-cov
    
    - name: Run enhanced validation tests
      working-directory: ./samples/python
      run: |
        python -m pytest tests/test_enhanced_validation.py -v --cov=src/ap2/validation --cov-report=xml
    
    - name: Run existing validation tests
      working-directory: ./samples/python
      run: |
        python -m pytest tests/ -k "validation" -v
    
    - name: Test backward compatibility
      working-directory: ./samples/python
      run: |
        python -c "
        from src.common.validation import validate_payment_mandate_signature
        from ap2.types.mandate import PaymentMandate
        from unittest.mock import Mock
        
        # Test backward compatibility
        mock_auth = Mock()
        mock_auth.__dict__ = {'signature': 'test_signature'}
        mandate = PaymentMandate(user_authorization=mock_auth)
        
        validate_payment_mandate_signature(mandate)
        print('✅ Backward compatibility test passed')
        "
    
    - name: Test enhanced validation features
      working-directory: ./samples/python
      run: |
        python -c "
        from ap2.validation.enhanced_validation import EnhancedValidator, AP2ErrorCode
        from ap2.types.payment_request import PaymentCurrencyAmount
        
        validator = EnhancedValidator()
        
        # Test valid currency
        amount = PaymentCurrencyAmount(currency='USD', value=99.99)
        result = validator.validate_currency_amount(amount)
        assert result.is_valid, 'Valid currency test failed'
        
        # Test invalid currency
        amount = PaymentCurrencyAmount(currency='INVALID', value=99.99)
        result = validator.validate_currency_amount(amount)
        assert not result.is_valid, 'Invalid currency test failed'
        assert result.errors[0]['error_code'] == 'AP2_1002', 'Error code test failed'
        
        print('✅ Enhanced validation features test passed')
        "
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./samples/python/coverage.xml
        flags: protocol-enhancement
        name: codecov-umbrella
    
    - name: Validate documentation
      run: |
        # Check that documentation files exist and are not empty
        test -s docs/protocol/enhanced-error-handling.md
        test -s PROTOCOL_CONTRIBUTION_GUIDE.md
        test -s PROTOCOL_CONTRIBUTION_COMPLETE.md
        echo "✅ Documentation validation passed"
    
    - name: Check for breaking changes
      working-directory: ./samples/python
      run: |
        # Ensure existing imports still work
        python -c "
        # Test all existing imports continue to work
        from src.common.validation import validate_payment_mandate_signature
        from ap2.types.mandate import PaymentMandate
        from ap2.types.payment_request import PaymentRequest, PaymentCurrencyAmount
        
        print('✅ No breaking changes detected')
        "
    
    - name: Security scan
      working-directory: ./samples/python
      run: |
        python -m pip install bandit
        python -m bandit -r src/ap2/validation/ -f json -o bandit-report.json || true
        python -c "
        import json
        try:
            with open('bandit-report.json', 'r') as f:
                report = json.load(f)
            high_severity = [issue for issue in report.get('results', []) if issue.get('issue_severity') == 'HIGH']
            if high_severity:
                print(f'❌ {len(high_severity)} high severity security issues found')
                exit(1)
            else:
                print('✅ No high severity security issues found')
        except FileNotFoundError:
            print('✅ Security scan completed successfully')
        "

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install linting tools
      run: |
        python -m pip install black isort flake8 mypy
    
    - name: Check code formatting with Black
      working-directory: ./samples/python
      run: |
        black --check --diff src/ap2/validation/
    
    - name: Check import sorting with isort
      working-directory: ./samples/python
      run: |
        isort --check-only --diff src/ap2/validation/
    
    - name: Lint with flake8
      working-directory: ./samples/python
      run: |
        flake8 src/ap2/validation/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type check with mypy
      working-directory: ./samples/python
      run: |
        mypy src/ap2/validation/ --ignore-missing-imports || true