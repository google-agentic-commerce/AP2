apiVersion: v1
kind: Namespace
metadata:
  name: ai-shopping-concierge
  labels:
    app: ai-shopping-concierge
    version: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: ai-shopping-concierge
data:
  ENVIRONMENT: "production"
  DEBUG: "false"
  DATABASE_URL: "postgresql+asyncpg://postgres:$(DB_PASSWORD)@postgres-service:5432/ai_shopping_concierge"
  REDIS_URL: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: ai-shopping-concierge
type: Opaque
data:
  # Base64 encoded secrets - update these in your deployment pipeline
  DB_PASSWORD: cG9zdGdyZXM=  # postgres
  REDIS_PASSWORD: cmVkaXM=   # redis
  GOOGLE_AI_API_KEY: ""
  WHATSAPP_ACCESS_TOKEN: ""
  WHATSAPP_VERIFY_TOKEN: ""
  WHATSAPP_PHONE_NUMBER_ID: ""
  AP2_MERCHANT_ID: ""
  AP2_API_KEY: ""
  STRIPE_API_KEY: ""
  PAYPAL_CLIENT_ID: ""
  PAYPAL_CLIENT_SECRET: ""
  SECRET_KEY: ""
  SENTRY_DSN: ""
  GRAFANA_ADMIN_USER: YWRtaW4=  # admin
  GRAFANA_ADMIN_PASSWORD: YWRtaW4=  # admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-shopping-concierge
  namespace: ai-shopping-concierge
  labels:
    app: ai-shopping-concierge
    tier: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-shopping-concierge
      tier: application
  template:
    metadata:
      labels:
        app: ai-shopping-concierge
        tier: application
    spec:
      containers:
      - name: ai-shopping-concierge
        image: ghcr.io/your-username/ai-shopping-concierge:latest
        ports:
        - containerPort: 8000
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
        - name: GOOGLE_AI_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: GOOGLE_AI_API_KEY
        - name: WHATSAPP_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: WHATSAPP_ACCESS_TOKEN
        - name: WHATSAPP_VERIFY_TOKEN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: WHATSAPP_VERIFY_TOKEN
        - name: WHATSAPP_PHONE_NUMBER_ID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: WHATSAPP_PHONE_NUMBER_ID
        - name: AP2_MERCHANT_ID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: AP2_MERCHANT_ID
        - name: AP2_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: AP2_API_KEY
        - name: STRIPE_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: STRIPE_API_KEY
        - name: PAYPAL_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: PAYPAL_CLIENT_ID
        - name: PAYPAL_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: PAYPAL_CLIENT_SECRET
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: SECRET_KEY
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: SENTRY_DSN
        envFrom:
        - configMapRef:
            name: app-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: logs-pvc
      - name: config
        configMap:
          name: app-config
      imagePullSecrets:
      - name: ghcr-secret
---
apiVersion: v1
kind: Service
metadata:
  name: ai-shopping-concierge-service
  namespace: ai-shopping-concierge
  labels:
    app: ai-shopping-concierge
    tier: application
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
  selector:
    app: ai-shopping-concierge
    tier: application
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: ai-shopping-concierge
  labels:
    app: postgres
    tier: database
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      tier: database
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: ai_shopping_concierge
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8"
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - ai_shopping_concierge
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - ai_shopping_concierge
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: backup
          mountPath: /backup
      volumes:
      - name: backup
        persistentVolumeClaim:
          claimName: backup-pvc
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: ai-shopping-concierge
  labels:
    app: postgres
    tier: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres
    tier: database
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: ai-shopping-concierge
  labels:
    app: redis
    tier: cache
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
      tier: cache
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        - --appendfsync
        - everysec
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        volumeMounts:
        - name: redis-storage
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: ai-shopping-concierge
  labels:
    app: redis
    tier: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis
    tier: cache
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ai-shopping-concierge-ingress
  namespace: ai-shopping-concierge
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/body-size: "10m"
spec:
  tls:
  - hosts:
    - api.your-domain.com
    secretName: ai-shopping-concierge-tls
  rules:
  - host: api.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ai-shopping-concierge-service
            port:
              number: 8000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: ai-shopping-concierge
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs"
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: ai-shopping-concierge
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs"
  resources:
    requests:
      storage: 200Gi
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ai-shopping-concierge-pdb
  namespace: ai-shopping-concierge
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ai-shopping-concierge
      tier: application
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-shopping-concierge-hpa
  namespace: ai-shopping-concierge
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-shopping-concierge
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-shopping-concierge-netpol
  namespace: ai-shopping-concierge
spec:
  podSelector:
    matchLabels:
      app: ai-shopping-concierge
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: postgres
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow all outbound for external APIs
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80