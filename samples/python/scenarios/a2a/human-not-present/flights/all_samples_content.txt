--- Content of run_cli.py ---

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A custom CLI runner for the human-not-present flight booking demo."""
import asyncio
import logging
import subprocess
import sys
import time
from pathlib import Path

# Add the project's `src` directory to the Python path.
project_root = Path(__file__).resolve().parents[5]
src_path = project_root / "samples" / "python" / "src"
sys.path.insert(0, str(src_path))

from google.adk.agents.llm_agent import LlmAgent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService, Session
from google.genai.types import Content, Part

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt

from roles.shopping_agent_flights.agent import flight_shopping_agent

logging.basicConfig(level=logging.WARNING)


async def run_demo(runner: Runner, session: Session):
    """Drives the conversational agent programmatically using the Runner."""
    console = Console()
    console.print(
        Panel(
            "Welcome to the AP2 Structured Mandate Demo!\nThis script drives a"
            " conversational ADK agent for a controlled CLI experience.",
            title="[bold magenta]Human-Not-Present Flight Demo[/bold magenta]",
            border_style="magenta",
        )
    )

    # The agent's instruction prompt will generate the first greeting.
    # We start the conversation by sending an initial empty message.
    invocation = runner.run_async(
        user_id=session.user_id,
        session_id=session.id,
        new_message=Content(role="user", parts=[Part(text="Hi there")]),
    )

    # This loop will now handle the entire conversation flow.
    while True:
        try:
            # Get the next set of events from the agent
            events = [event async for event in invocation]

            # Process and display final responses from the events
            final_text = ""
            for event in events:
                # Use the correct API to check if this is a user-facing message
                if event.is_final_response():
                    # Safely access the text content
                    if event.content and event.content.parts and event.content.parts[0].text:
                        final_text += event.content.parts[0].text.strip() + " "
                if event.error_message:
                    console.print(f"[bold red]AGENT ERROR: {event.error_message}[/bold red]")

            if final_text:
                console.print(f"\n[bold green]{session.app_name}:[/bold green] {final_text.strip()}")

            # After displaying the agent's response, prompt for the next user input
            user_input = Prompt.ask("\n[bold]You[/bold]")
            if user_input.lower() in ["exit", "quit"]:
                break

            # Start the next invocation with the new user message
            invocation = runner.run_async(
                user_id=session.user_id,
                session_id=session.id,
                new_message=Content(role="user", parts=[Part(text=user_input)]),
            )

        except StopAsyncIteration:
            console.print("\n[bold yellow]Conversation ended.[/bold yellow]")
            break


def main():
    """Main function to start the server and run the demo."""
    merchant_log_path = project_root / ".logs" / "flight_merchant.log"
    merchant_log_path.parent.mkdir(exist_ok=True)

    merchant_command = [
        "uv", "run", "--package", "ap2-samples",
        "python", "-m", "roles.merchant_agent_flights",
    ]

    app_name = "flight_shopping_agent"
    user_id = "cli_user"
    session_id = "cli_session"
    session_service = InMemorySessionService()
    runner = Runner(
        agent=flight_shopping_agent,
        app_name=app_name,
        session_service=session_service,
    )

    process = None
    try:
        with open(merchant_log_path, "w") as log_file:
            process = subprocess.Popen(
                merchant_command,
                cwd=project_root,
                stdout=log_file,
                stderr=subprocess.STDOUT,
            )
        print(
            "--> Started Flight Merchant Agent in the background (log:"
            " .logs/flight_merchant.log)"
        )
        time.sleep(3)

        session = asyncio.run(session_service.create_session(
            app_name=app_name, user_id=user_id, session_id=session_id
        ))

        asyncio.run(run_demo(runner, session))
    finally:
        if process:
            print("\n--> Shutting down background merchant agent...")
            process.terminate()
            process.wait()
            print("--> Cleanup complete.")


if __name__ == "__main__":
    main()


--- Content of run.sh ---

#!/bin/bash
# Exit immediately if a command exits with a non-zero status.
set -e

# Get the directory of this script to find the custom CLI runner
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

if [ -f .env ]; then
  set -a
  source .env
  set +a
fi

if [ -z "${GOOGLE_API_KEY}" ]; then
  echo "Please set your GOOGLE_API_KEY environment variable before running."
  exit 1
fi

# --- Environment Setup ---
# This ensures a clean, project-specific environment for every run
# without deleting the shared, global package cache.
echo "Setting up a clean Python virtual environment..."
deactivate || true # Deactivate if active, ignore error if not
rm -rf .venv
uv venv
source .venv/bin/activate
echo "Virtual environment activated."

# A single, reliable command to install everything.
# This will be VERY FAST on subsequent runs because it uses the uv cache.
echo "Syncing virtual environment with all dependencies (using cache)..."
uv sync --package ap2-samples

echo ""
echo "Starting the custom CLI for the Flight Shopping Demo..."

# Execute the custom Python runner script directly using the venv's python.
.venv/bin/python "${SCRIPT_DIR}/run_cli.py"


--- Content of README.md ---

# Agent Payments Protocol Sample: Human-Not-Present Flight Booking with Hallucination Check

This sample demonstrates a human-not-present transaction where an autonomous AI agent is prevented from making an incorrect purchase due to a "hallucination".

## Scenario

A user wants to book a flight to Paris for under 200 GBP. They interact with a shopping agent to create and digitally sign an `IntentMandate` that authorizes the agent to perform this task autonomously. The user then "steps away."

The shopping agent, simulating an AI hallucination, first attempts to book a flight to the wrong destination (Dublin). The remote merchant agent receives this request, validates it against the user's signed `IntentMandate`, detects the mismatch, and **blocks the transaction**.

The shopping agent then corrects itself and attempts to book the correct flight to Paris, which the merchant agent validates and approves.

This flow highlights a core security feature of AP2: ensuring an agent's actions strictly adhere to the user's cryptographically-signed intent, providing a safeguard against model errors or unpredictable behavior.

## Key Actors

*   **Flight Shopping Agent:** A conversational ADK agent that interacts with the user, creates the `IntentMandate`, and attempts the purchases.
*   **Flight Merchant Agent:** An A2A server-based agent that receives purchase requests and rigorously validates them against the signed `IntentMandate`.

## Executing the Example

### Setup

Ensure you have obtained a Google API key from [Google AI Studio](https://aistudio.google.com/apikey) and set it as an environment variable:
`export GOOGLE_API_KEY=your_key`

### Execution

From the root of the repository, run the following command:

```sh
bash samples/python/scenarios/a2a/human-not-present/flights/run.sh


