# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tools used by the Shopping Agent.

This module defines tools for interacting with other agents like the Payment
Agent and the Merchant Agent, as well as helper functions for creating
intent mandates and generating user signatures.
"""

from typing import Any, List, TypeVar
from pydantic import BaseModel

from a2a.types import Artifact
from a2a.utils import message as message_utils

T = TypeVar("T")


def find_canonical_objects(
    artifacts: List[Artifact], data_key: str, model: BaseModel
) -> List[BaseModel]:
  if artifacts is None:
    return []
  canonical_objects = []
  for artifact in artifacts:
    for part in artifact.parts:
      if data_key in part.root.data:
        canonical_objects.append(model.model_validate(part.root.data[data_key]))
  return canonical_objects


def get_first_data_part(artifacts: List[Artifact]) -> dict[str, Any]:
  """Finds the first piece of data in the artifacts."""
  if artifacts is None:
    return {}
  data_parts = [
      message_utils.get_data_parts(artifact.parts) for artifact in artifacts
  ]
  flat_list = []
  for data_part in data_parts:
    for item in data_part:
      flat_list.append(item)
  if not flat_list:
    return {}
  return flat_list[0]


def only(list: List[T]) -> T:
  """Returns the only element in a list, or raises a ValueError if the list is empty or has more than one element."""
  if not list:
    raise ValueError("List is empty.")
  if len(list) > 1:
    raise ValueError("List has more than one element.")
  return list[0]
