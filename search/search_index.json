{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Agent Payments Protocol (AP2)"},{"location":"#what-is-ap2","title":"What is AP2?","text":"<p>Agent Payments Protocol (AP2) is an open protocol for the emerging Agent Economy. It's designed to enable secure, reliable, and interoperable agent commerce for developers, merchants, and the payments industry. The protocol is available as an extension for the open-source Agent2Agent (A2A) protocol, with more integrations in progress.</p> <p>Build agents with  ADK (or any framework), equip with  MCP (or any tool), collaborate via  A2A, and use  AP2 to secure payments with gen AI agents.</p> <ul> <li> <p> Video Intro in &lt;7 min</p> <p></p> </li> <li> <p> Read the docs</p> <p> Google Cloud announcement of AP2</p> <p>Explore the detailed technical definition of the AP2 protocol</p> <p> Agent Payments Protocol Specification</p> <p>Review key topics</p> <p> Overview  Core Concepts  AP2, A2A and MCP  AP2 and x402  Privacy and Security</p> </li> </ul>"},{"location":"#why-an-agent-payments-protocol-is-needed","title":"Why an Agent Payments Protocol is Needed","text":"<p>Today\u2019s payment systems assume a human is directly clicking \"buy\" on a trusted website. When an autonomous agent initiates a payment, this core assumption is broken, leading to critical questions that current systems cannot answer:</p> <ul> <li>Authorization: How can we verify that a user gave an agent specific     authority for a particular purchase?</li> <li>Authenticity: How can a merchant be sure an agent's request accurately     reflects the user's true intent, without errors or AI \"hallucinations\"?</li> <li>Accountability: If a fraudulent or incorrect transaction occurs, who is     accountable\u2014the user, the agent's developer, the merchant, or the issuer?</li> </ul> <p>This ambiguity creates a crisis of trust that could significantly limit adoption. Without a common protocol, we risk a fragmented ecosystem of proprietary payment solutions, which would be confusing for users, expensive for merchants, and difficult for financial institutions to manage. AP2 aims to create a common language for any compliant agent to transact securely with any compliant merchant globally.</p>"},{"location":"#core-principles-and-goals","title":"Core Principles and Goals","text":"<p>The Agent Payments Protocol is built on fundamental principles designed to create a secure and fair ecosystem:</p> <ul> <li>Openness and Interoperability: As a non-proprietary, open extension for     A2A and MCP, AP2 fosters a competitive environment for innovation, broad     merchant reach, and user choice.</li> <li>User Control and Privacy: The user must always be in control. The     protocol is designed with privacy at its core, using a role-based     architecture to protect sensitive payment details and personal information.</li> <li>Verifiable Intent, Not Inferred Action: Trust in payments is anchored to     deterministic, non-repudiable proof of intent from the user, directly     addressing the risk of agent error or hallucination.</li> <li>Clear Transaction Accountability: AP2 provides a non-repudiable,     cryptographic audit trail for every transaction, aiding in dispute     resolution and building confidence for all participants.</li> <li>Global and Future-Proof: Designed as a global foundation, the initial     version supports common \"pull\" payment methods like credit and debit cards.     The roadmap includes \"push\" payments such as real-time bank transfers (e.g.,     UPI and PIX) and digital currencies.</li> </ul>"},{"location":"#key-concept-verifiable-digital-credentials-vdcs","title":"Key Concept: Verifiable Digital Credentials (VDCs)","text":"<p>The Agent Payments Protocol engineers trust into the system using verifiable digital credentials (VDCs). VDCs are tamper-evident, cryptographically signed digital objects that serve as the building blocks of a transaction. They are the data payloads that agents create and exchange. There are three primary types:</p> <ul> <li>The Intent Mandate: This VDC captures the conditions under which an AI     Agent can make a purchase on behalf of the user, particularly in     \"human-not-present\" scenarios. It provides the agent with authority to     execute a transaction within defined constraints.</li> <li>The Cart Mandate: This VDC captures the user's final, explicit     authorization for a specific cart, including the exact items and price, in     \"human-present\" scenarios. The user's cryptographic signature on this     mandate provides non-repudiable proof of their intent.</li> <li>The Payment Mandate: A separate VDC shared with the payment network and     issuer, designed to signal AI agent involvement and user presence     (human-present or not) to help assess transaction context.</li> </ul> <p>These VDCs operate within a defined role-based architecture and can handle both \"human-present\" and \"human-not-present\" transaction types.</p> <p>Learn more in Core Concepts.</p>"},{"location":"#see-it-in-action","title":"See it in action","text":"<ul> <li> <p>Human Present Cards</p> <p>A sample demonstrating a human-present transaction using traditional card payments.</p> <p> Go to sample</p> </li> <li> <p>Human Present x402</p> <p>A sample demonstrating a human-present transaction using the x402 protocol for payments.</p> <p> Go to sample</p> </li> <li> <p>Digital Payment Credentials Android</p> <p>A sample demonstrating the use of digital payment credentials on an Android device.</p> <p> Go to sample</p> </li> </ul>"},{"location":"#get-started-and-build-with-us","title":"Get Started and Build with Us","text":"<p>The Agent Payments Protocol provides a mechanism for secure payments, and it's part of a larger picture to unlock the full potential of agent-enabled commerce. We actively seek your feedback and contributions to help build the future of commerce.</p> <p>The complete technical specification, documentation, and reference implementations are hosted in our public GitHub repository.</p> <p>You can get started today by:</p> <ul> <li>Downloading and running our code samples.</li> <li>Experimenting with the protocol and its different agent roles.</li> <li>Contributing your feedback and code to the public repository.</li> </ul> <p>Visit the GitHub Repository</p>"},{"location":"a2a-extension/","title":"A2A Extension for AP2","text":"<p>Info</p> <p>This is an Agent2Agent (A2A) extension implementing the Agent Payments Protocol (AP2).</p> <p><code>v0.1-alpha</code> (see roadmap)</p>"},{"location":"a2a-extension/#extension-uri","title":"Extension URI","text":"<p>The URI for this extension is <code>https://github.com/google-agentic-commerce/ap2/tree/v0.1</code>.</p> <p>Agents that support the AP2 extension MUST use this URI.</p>"},{"location":"a2a-extension/#agent-ap2-role","title":"Agent AP2 Role","text":"<p>Every Agent that supports the AP2 extension MUST perform at least one Role from the AP2 specification. This role is specified in the AgentCard.</p>"},{"location":"a2a-extension/#agentcard-extension-object","title":"AgentCard Extension Object","text":"<p>Agents that support the AP2 extension MUST advertise their support for an AgentCard extension, using the Extension URI.</p> <p>The <code>params</code> used in the <code>AgentExtension</code> MUST adhere to the following JSON schema:</p> <pre><code>{\n  \"type\": \"object\",\n  \"name\": \"AP2ExtensionParameters\",\n  \"description\": \"The schema for parameters expressed in AgentExtension.params for the AP2 A2A extension.\",\n  \"properties\": {\n    \"roles\": {\n      \"type\": \"array\",\n      \"name\": \"AP2 Roles\",\n      \"description\": \"The roles that this agent performs in the AP2 model.\",\n      \"minItems\": 1,\n      \"items\": {\n        \"enum\": [\"merchant\", \"shopper\", \"credentials-provider\", \"payment-processor\"]\n      }\n    }\n  },\n  \"required\": [\"roles\"]\n}\n</code></pre> <p>This schema is also expressed by the following Pydantic type definition:</p> <pre><code>AP2Role = \"merchant\" | \"shopper\" | \"credentials-provider\" | \"payment-processor\"\n\nclass AP2ExtensionParameters(BaseModel):\n  # The roles this agent performs in the AP2 model. At least one value is required.\n  roles: list[AP2Role] = Field(..., min_length=1)\n</code></pre> <p>Agents that perform the <code>\"merchant\"</code> role SHOULD set the AP2 extension to required. This indicates that clients must be able to use the AP2 extension to pay for services offered by the agent.</p> <p>The following listing shows an AgentCard declaring AP2 extension support.</p> <pre><code>{\n  \"name\": \"Travel Agent\",\n  \"description\": \"This agent can book all necessary parts of a vacation\",\n  \"capabilities\": {\n    \"extensions\": [\n      {\n        \"uri\": \"https://github.com/google-agentic-commerce/ap2/tree/v0.1\",\n        \"description\": \"This agent can pay for reservations on the user's behalf\",\n        \"params\": {\n          \"roles\": [\"shopper\"]\n        }\n      }\n    ]\n  },\n  \"skills\": [\n    {\n      \"id\": \"plan_vacation\",\n      \"name\": \"Plan Vacation\",\n      \"description\": \"Plan a fun vacation, creating a full itinerary\",\n      \"tags\": []\n    },\n    {\n      \"id\": \"book_itinerary\",\n      \"name\": \"Book Itinerary\",\n      \"description\": \"Place reservations for all components of an itinerary (flights, hotels, rentals, restaurants, etc.)\",\n      \"tags\": []\n    }\n  ]\n}\n</code></pre>"},{"location":"a2a-extension/#ap2-data-type-containers","title":"AP2 Data Type Containers","text":"<p>The following sections describe how AP2 data types are encapsulated into A2A data types.</p>"},{"location":"a2a-extension/#intentmandate-message","title":"IntentMandate Message","text":"<p>To provide an <code>IntentMandate</code>, the agent MUST create an IntentMandate Message. An IntentMandate Message is an A2A <code>Message</code> profile with the following requirements.</p> <p>The Message MUST contain a DataPart that contains a key of <code>ap2.mandates.IntentMandate</code> and a value that adheres to the <code>IntentMandate</code> schema.</p> <p>The Message MAY contain a DataPart that contains a key of <code>risk_data</code>, where the value contains implementation-defined risk signals.</p> <p>The following listing shows the JSON rendering of an IntentMandate Message.</p> <pre><code>{\n  \"messageId\": \"e0b84c60-3f5f-4234-adc6-91f2b73b19e5\",\n  \"contextId\": \"sample-payment-context\",\n  \"taskId\": \"sample-payment-task\",\n  \"role\": \"user\",\n  \"parts\": [\n    {\n      \"kind\": \"data\",\n      \"data\": {\n        \"ap2.mandates.IntentMandate\": {\n          \"user_cart_confirmation_required\": false,\n          \"natural_language_description\": \"I'd like some cool red shoes in my size\",\n          \"merchants\": null,\n          \"skus\": null,\n          \"required_refundability\": true,\n          \"intent_expiry\": \"2025-09-16T15:00:00Z\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"a2a-extension/#cartmandate-artifact","title":"CartMandate Artifact","text":"<p>To initiate a request for payment, a Merchant Agent MUST produce a CartMandate Artifact. The CartMandate Artifact is a profile of an A2A Artifact. A Merchant Agent MUST NOT produce a CartMandate until all required payment-impacting information has been collected. Payment-impacting information is any information provided by a client that changes the CartContents, and therefore the price to be paid. For example, a shipping address may change the price for shipping that is included in the CartContents.</p> <p>The CartMandate Artifact MUST have a DataPart that contains a key of <code>ap2.mandates.CartMandate</code> with a corresponding object that adheres to the CartMandate schema.</p> <p>The CartMandate Artifact MAY include a DataPart that contains a key of <code>risk_data</code> and a value that contains implementation-defined risk signal data.</p> <p>The following listing shows the JSON representation of a CartMandate Artifact.</p> <pre><code>{\n  \"name\": \"Fancy Cart Details\",\n  \"artifactId\": \"artifact_001\",\n  \"parts\": [\n    {\n      \"kind\": \"data\",\n      \"data\": {\n        \"ap2.mandates.CartMandate\": {\n          \"contents\": {\n            \"id\": \"cart_shoes_123\",\n            \"user_signature_required\": false,\n            \"payment_request\": {\n              \"method_data\": [\n                {\n                  \"supported_methods\": \"CARD\",\n                  \"data\": {\n                    \"payment_processor_url\": \"http://example.com/pay\"\n                  }\n                }\n              ],\n              \"details\": {\n                \"id\": \"order_shoes_123\",\n                \"displayItems\": [\n                  {\n                    \"label\": \"Cool Shoes Max\",\n                    \"amount\": {\n                      \"currency\": \"USD\",\n                      \"value\": 120.0\n                    },\n                    \"pending\": null\n                  }\n                ],\n                \"shipping_options\": null,\n                \"modifiers\": null,\n                \"total\": {\n                  \"label\": \"Total\",\n                  \"amount\": {\n                    \"currency\": \"USD\",\n                    \"value\": 120.0\n                  },\n                  \"pending\": null\n                }\n              },\n              \"options\": {\n                \"requestPayerName\": false,\n                \"requestPayerEmail\": false,\n                \"requestPayerPhone\": false,\n                \"requestShipping\": true,\n                \"shippingType\": null\n              }\n            }\n          },\n          \"merchant_signature\": \"sig_merchant_shoes_abc1\",\n          \"timestamp\": \"2025-08-26T19:36:36.377022Z\"\n        }\n      }\n    },\n    {\n      \"kind\": \"data\",\n      \"data\": {\n        \"risk_data\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...fake_risk_data\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"a2a-extension/#paymentmandate-message","title":"PaymentMandate Message","text":"<p>To provide a PaymentMandate to an agent, the client MUST construct a PaymentMandate Message. A PaymentMandate Message is a profile of an A2A Message.</p> <p>A PaymentMandate Message MUST contain a DataPart that has a key of <code>ap2.mandates.PaymentMandate</code> and the value MUST be an object that adheres to the <code>PaymentMandate</code> schema.</p> <p>A PaymentMandate Message MAY contain other Parts.</p> <p>The following listing shows a JSON rendering of a PaymentMandate Message.</p> <pre><code>{\n  \"messageId\": \"b5951b1a-8d5b-4ad3-a06f-92bf74e76589\",\n  \"contextId\": \"sample-payment-context\",\n  \"taskId\": \"sample-payment-task\",\n  \"role\": \"user\",\n  \"parts\": [\n    {\n      \"kind\": \"data\",\n      \"data\": {\n        \"ap2.mandates.PaymentMandate\": {\n          \"payment_mandate_contents\": {\n            \"payment_mandate_id\": \"pm_12345\",\n            \"payment_details_id\": \"order_shoes_123\",\n            \"payment_details_total\": {\n              \"label\": \"Total\",\n              \"amount\": {\n                \"currency\": \"USD\",\n                \"value\": 120.0\n              },\n              \"pending\": null,\n              \"refund_period\": 30\n            },\n            \"payment_response\": {\n              \"request_id\": \"order_shoes_123\",\n              \"method_name\": \"CARD\",\n              \"details\": {\n                \"token\": \"xyz789\"\n              },\n              \"shipping_address\": null,\n              \"shipping_option\": null,\n              \"payer_name\": null,\n              \"payer_email\": null,\n              \"payer_phone\": null\n            },\n            \"merchant_agent\": \"MerchantAgent\",\n            \"timestamp\": \"2025-08-26T19:36:36.377022Z\"\n          },\n          \"user_authorization\": \"eyJhbGciOiJFUzI1NksiLCJraWQiOiJkaWQ6ZXhhbXBsZ...\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<ol> <li> <p>What can I do with this protocol today?</p> <ul> <li>We built sample agents around the core AP2 python library that demonstrate   a rich shopping experience. Launch the agents, and try shopping for your   favorite products! These samples mock actual payment service providers so   you can explore with no dependencies. Specifically, watch for the mandates   as the agents do their thing. We will be publishing more samples and SDKs   soon, and we'd love to see your ideas! You can use the code samples to   create your own implementation of a payment taking place between multiple   AI Agents or extend the protocol to show new kinds of payment scenarios   (say, showing a payment made by a different payment method or using a   different way of authentication).</li> </ul> </li> <li> <p>Can I build my own agent for any of these roles, taking one of these as a    template?</p> <ul> <li>Yes you can build your own agent using any of the   roles. Get started building with   ADK and   Agent Builder from   Google Cloud, or any other platform you choose to build agents.</li> </ul> </li> <li> <p>Can I build my own agent to participate in this protocol?</p> <ul> <li>Yes, you can build an agent for any of the defined   roles. Any agent, on any framework (like   LangGraph, AG2 or CrewAI), or on any runtime, is capable of implementing   AP2.</li> </ul> </li> <li> <p>Can I try this out without actually making a payment?</p> <ul> <li>You can consider setting this up in your internal environments where you   may already have ways to invoke fake payment methods which do not require   real money movement.</li> </ul> </li> <li> <p>Is there a MCP server or a SDK which is ready for \"my framework of choice\"?</p> <ul> <li>We are working on an SDK and a MCP server right now, in collaboration with   payment service providers. Check back soon.</li> </ul> </li> <li> <p>Does this work with x402 standard for crypto payments?</p> <ul> <li> <p>We designed AP2 to be a payment-agnostic protocol, so that agentic   commerce can securely take place across all types of payment systems. It   provides a secure, auditable foundation whether an agent is using a credit   card or transacting with stablecoins. This flexible design allows us to   extend its core principles to new ecosystems, ensuring a consistent   standard for trust everywhere.</p> <p>As a first step, check out google-agentic-commerce/a2a-x402 which is an implementation of A2A in conjunction with the x402 standard. We will be aligning this closely with AP2 over time to make it easy to compose solutions which include all payment methods, including stablecoins.</p> </li> </ul> </li> <li> <p>What are verifiable credentials?</p> <ul> <li>These are standardized, cryptographically secure data objects (like the   Cart Mandate and Intent Mandate) that serve as tamper-evident,   non-disputable, and cryptographically signed building blocks for a   transaction.</li> </ul> </li> <li> <p>How does the protocol ensure user control and privacy?</p> <ul> <li>The protocol is designed to ensure the user is always the ultimate   authority and has granular control over their agents' activities. It   protects sensitive user information, such as conversational prompts and   personal payment details, by preventing shopping agents from accessing   sensitive PCI or PII data through payload encryption and a role-based   architecture.</li> </ul> </li> <li> <p>How does AP2 address transaction accountability?</p> <ul> <li>A primary objective is to provide supporting evidence that helps payment   networks establish accountability and liability principles. In a dispute,   the network adjudicator (e.g., Card Network) can use the user-signed   cart mandate and compare the details of what was agreed upon between the   agent and the consumer against the details in the dispute to help   determine transaction accountability.</li> </ul> </li> <li> <p>What prevents an agent from \"hallucinating\" and making an incorrect purchase?</p> <ul> <li>The principle of Verifiable Intent, Not Inferred Action addresses this   risk. Transactions must be anchored to deterministic, non-repudiable proof   of intent from all parties, such as the user-signed Cart or Intent   Mandate, rather than relying only on interpreting the probabilistic and   ambiguous outputs of a language model.</li> </ul> </li> <li> <p>Why was crypto and Web3 support included from day one?</p> <ul> <li>Supporting a broad range of payment types, including digital payment   methods ensures the protocol is future-proof. Collaboration with partners   like Coinbase, Ethereum Foundation, and Metamask validates AP2's   flexibility and bridges the gap between the traditional and Web3   economies, enabling novel use cases like micropayments.</li> </ul> </li> <li> <p>How can I get involved?</p> <ul> <li>AP2 is an open source project created by Google, similar to the A2A   protocol. Contributions are welcome on Github as discussions, bugs,   feature requests, and PRs. Additionally we have an   interest form for private   communication with Google. Collaboration is happening right now, with new   samples, integrations and SDKs being developed \u2013 Github or the interest   form are the best ways to communicate with the AP2 team.</li> </ul> </li> </ol>"},{"location":"glossary/","title":"Glossary","text":"Term Acronym Definition Synonym / Related Agent Payments Protocol AP2 An open protocol designed to enable AI agents to securely interoperate and complete payments autonomously. Agent2Agent Protocol A2A An open standard for secure, collaborative communication and task management between diverse AI agents, regardless of their underlying frameworks. Context: AP2 can be implemented as an extension of A2A to facilitate financial transactions, with a focus on high-trust agentic payments. Agentic payments Payment flows in which autonomous AI Agents are involved. Credentials Provider CP A secure entity, like a digital wallet, responsible for managing and executing the user's payment and identity credentials. Deterministic cryptographical proof A unique mathematical proof that could be linked to a hardware device. Dynamic Linking A core requirement for Strong Customer Authentication (SCA), involving the inclusion of specific transaction details within a Payment Credential to link the SCA to that transaction. Context: Ensures the payer explicitly consents to transaction details like amount and payee. Merchant Endpoint (Or Remote Endpoint) ME, RE The web interface or AI agent representing the seller, showcasing products and negotiating the cart. Merchant Payment Processor Endpoint MPP The entity responsible for constructing and sending the transaction authorization message to the payment ecosystem. Model Context Protocol MCP A protocol standardizing how AI models and agents connect to and interact with external resources like tools, APIs, and data sources. Payee A person or entity who is the intended recipient of funds from a payment transaction. Context: Can request attestations along with payment confirmation. Merchant, Creditor Name Payer A person or entity who holds a payment account, allows a payment order from that account. Context: Initiates payment orders. User, Holder Payment Agent A proposed key role in agent payments responsible for selecting the ideal payment method, validating payment details, and handling errors. Context: A Payment Agent is not a necessary requirement to participate in the protocol. MCP-based endpoints can also play similar roles. Payment Contracts \"Mandates\" or \"Payment Contracts\" that capture a user's specific instructions to their agent. Context: Define principles for safe, secure, and high-trust agentic payments. They can be global or transaction-level. Mandates, Shopping Mandate Payment Credential A credential or instrument (or reference to one) which can be charged towards a payment. Electronic Attestation of Attributes (EAA), Payment Wallet Attestation (PWA), Digital Payment Credentials (DPC), Payment Means Attestation, SPC Credential Payment Request API (W3C Standard) A web API that acts as an intermediary between a merchant, user, and payment method provider to streamline the payment experience. Strong Customer Authentication SCA A process required by regulatory frameworks for online identification and transaction initiation in financial services. Context: Central to the Payments Rulebook, ensuring security and dynamic linking of transactions. Strong User Authentication, Integrated SCA User The human initiating the task and providing financial authority. User Agent a.k.a. Shopping Agent UA, SA The AI surface interacts directly with the user, understanding their needs, and coordinating the purchase. Verifiable digital credential VDC An Issuer-signed credential (i.e., a set of Claims) whose authenticity can be verified. Context: Typically bound to a cryptographic key and used in the issuer-holder-verifier model. Digital credential, Verifiable Credential Verifiable Presentation VP A presentation of one or more VDCs that includes a cryptographic proof of holder binding, created in response to a request from a Verifier. Context: Allows a Verifier to confirm that the Holder intended the presentation for them and may reveal only a subset of claims."},{"location":"partners/","title":"Partners","text":"<p>Below is a list of partners who are part of the AP2 community and are helping build, codify, and adopt A2A as the standard protocol for AI agent payments.</p> <p>Organizations seeking a partnership with AP2 and inclusion on this page may provide details via this form for evaluation.</p> <ul> <li>1Password</li> <li>Accenture</li> <li>Adobe</li> <li>Adyen</li> <li>Affirm</li> <li>AirWallex</li> <li>Algorand</li> <li>Alibaba.com</li> <li>Amadeus</li> <li>American Express</li> <li>Ant Group</li> <li>BVNK</li> <li>Binance</li> <li>Blackhawk Network</li> <li>Block</li> <li>Boku</li> <li>Booking.com</li> <li>CMSPI</li> <li>Circle</li> <li>Cloudflare</li> <li>Cobo</li> <li>Coinbase</li> <li>Confluent</li> <li>Crossmint</li> <li>DLocal</li> <li>Dafiti</li> <li>Dana</li> <li>Dell</li> <li>Doku</li> <li>Ebanx</li> <li>EigenLayer</li> <li>Ethereum Foundation</li> <li>Etsy</li> <li>Experian</li> <li>Fiserv</li> <li>Fiuu</li> <li>Forter</li> <li>GMO Payment Gateway</li> <li>Garena</li> <li>Global Payments</li> <li>Gr4vy</li> <li>GrabPay</li> <li>Gravitee</li> <li>Hashkey</li> <li>Intuit</li> <li>JCB</li> <li>JKOPay</li> <li>JusPay</li> <li>KCP (Korea Cyber Payment)</li> <li>Kaia Network</li> <li>Klarna</li> <li>Lazada</li> <li>Lightspark</li> <li>Manus.ai</li> <li>Mastercard</li> <li>MegaEth</li> <li>Mercado Livre</li> <li>Mesh Payments</li> <li>MetaMask</li> <li>Minor Hotels</li> <li>Mollie</li> <li>Momo</li> <li>Monee (ShopeePay)</li> <li>Mysten Labs</li> <li>Natural Intelligence</li> <li>Nuvei</li> <li>Okta</li> <li>OKX</li> <li>Palo Alto Networks</li> <li>PayPal</li> <li>Paynet</li> <li>Payoneer</li> <li>Payplug</li> <li>Ping Identity</li> <li>Plaid</li> <li>Polygon</li> <li>Privy</li> <li>PwC</li> <li>Ramp</li> <li>Razer</li> <li>Red Hat</li> <li>Revolut</li> <li>Riskified</li> <li>Salesforce</li> <li>Sardine</li> <li>Cider</li> <li>Shopee</li> <li>Shopify</li> <li>Signifyd</li> <li>Solana</li> <li>Splitit</li> <li>Synchrony Financial</li> <li>TenPay</li> <li>Tether</li> <li>Thales</li> <li>The Iconic</li> <li>Toss</li> <li>Touch n Go</li> <li>Trip.com</li> <li>Truelayer</li> <li>Trulioo</li> <li>UiPath</li> <li>UnionPay International</li> <li>Vouched</li> <li>WPay</li> <li>Wayfair</li> <li>WooCommerce</li> <li>Worldline</li> <li>Worldpay</li> <li>Xendit</li> <li>Yapily</li> <li>ZIP</li> <li>Zalopay</li> <li>Zalora</li> </ul> <p>Many AP2 partners were featured in the keynote at Google's Gemini at Work on Oct 9th, 2025.</p> <p> </p>"},{"location":"roadmap/","title":"AP2 Roadmap","text":"<p>The development and rollout of the protocol are envisioned in a phased approach, allowing the ecosystem to build, test, and adopt capabilities incrementally.</p> <p>V0.1: (September 2025) The initial specification focuses on establishing the core architecture and enabling the most common use cases. Key features include: Support for \"pull\" payment methods (e.g., credit/debit cards) Well-defined data payloads to support transparent accountability based on the VDC framework Support for human-present scenarios Support for user and merchant-initiated step-up challenges Detailed sequence diagram and reference implementation using A2A protocol</p> <ul> <li> AP2 specifications v0.1 (human present, pull payments)</li> <li> AP2 A2A extension v0.1</li> <li> AP2 MCP server v0.1</li> <li> AP2 python SDK v0.1</li> <li> AP2 android SDK v0.1</li> </ul> <p>V1.x: Subsequent versions will expand the protocol's capabilities based on community feedback and evolving needs. Potential areas of focus include: Full support for \"push\" payments and all payment methods (e.g., real-time bank transfers, e-wallets etc.) Standardized flows for recurring payments and subscriptions Support for human-not-present scenarios Detailed sequence diagrams for MCP-based implementations</p> <p>Long-Term Vision: Longer term, we plan the protocol to incorporate more intelligence and flexibility, including: Native support for complex, multi-merchant transaction topologies Support for real-time negotiations between buyer and seller agents We believe that a collaborative approach is essential to creating a protocol that is robust, secure, and meets the diverse needs of the entire ecosystem. We actively seek feedback and critique on the github repository through issues and discussions.</p>"},{"location":"specification/","title":"Agent Payments Protocol (AP2): Building a Secure and Interoperable Future for AI-Driven Payments","text":""},{"location":"specification/#executive-summary","title":"Executive Summary","text":"<p>AI agents will redefine the landscape of digital commerce, promising unprecedented convenience, personalization, and efficiency. However, this shift exposes a fundamental challenge: the world's existing payments infrastructure was not designed for a future where autonomous, non-human agents act on a user's behalf, or transact with each other. Current payment protocols, built on the assumption of direct human initiated interaction with trusted interfaces, lack the mechanisms to securely validate an agent's authenticity and authority to transact. This exposes a long-standing defense against online fraud, creates ambiguity around transaction liability, and threatens adoption, not only of agent commerce, but also negatively impacts existing digital commerce.</p> <p>Without a common, trusted protocol, the industry faces the prospect of a fragmented and insecure ecosystem, characterized by proprietary, siloed solutions that increase complexity for merchants, create friction for users, and prevent financial institutions from uniformly assessing risk. To address this gap, this protocol proposes an open, interoperable protocol for agent payments. This protocol, designed as an extension for emerging agent-to-agent (A2A) and model-context protocols (MCP), establishes a secure and reliable framework for AI-driven commerce.</p>"},{"location":"specification/#an-invitation-to-collaborate-roadmap-and-community-engagement","title":"An Invitation to Collaborate: Roadmap and Community Engagement","text":"<p>The success of this foundational protocol for agent payments depends on broad industry participation, feedback, and public support. We invite all stakeholders in the commerce and payments ecosystem to join in refining and building this open protocol.</p>"},{"location":"specification/#proposed-roadmap","title":"Proposed Roadmap","text":"<p>The development and rollout of the protocol are envisioned in a phased approach, allowing the ecosystem to build, test, and adopt capabilities incrementally.</p> <ul> <li>V0.1: The initial specification focuses on establishing the core     architecture and enabling the most common use cases. Key features include:<ul> <li>Support for \"pull\" payment methods (e.g., credit/debit cards)</li> <li>Well-defined data payloads to support transparent accountability based     on the VDC framework</li> <li>Support for human-present scenarios</li> <li>Support for user and merchant-initiated step-up challenges</li> <li>Detailed sequence diagram and reference implementation using     A2A protocol</li> </ul> </li> <li>V1.x: Subsequent versions will expand the protocol's capabilities based     on community feedback and evolving needs. Potential areas of focus include:<ul> <li>Full support for \"push\" payments and all payment methods (e.g.,     real-time bank transfers, e-wallets etc.)</li> <li>Standardized flows for recurring payments and subscriptions</li> <li>Support for human-not-present scenarios</li> <li>Detailed sequence diagrams for MCP-based implementations</li> </ul> </li> <li>Long-Term Vision: Longer term, we plan the protocol to incorporate more     intelligence and flexibility, including:<ul> <li>Native support for complex, multi-merchant transaction topologies</li> <li>Support for real-time negotiations between buyer and seller agents</li> </ul> </li> </ul> <p>We believe that a collaborative approach is essential to creating a protocol that is robust, secure, and meets the diverse needs of the entire ecosystem. We actively seek feedback and critique on the github repository through issues and discussions.</p>"},{"location":"specification/#section-1-the-new-frontier-of-commerce-why-agent-payments-require-a-foundational-protocol","title":"Section 1: The New Frontier of Commerce: Why Agent Payments Require a Foundational Protocol","text":""},{"location":"specification/#11-the-rise-of-agent-commerce","title":"1.1 The Rise of Agent Commerce","text":"<p>The evolution of digital interaction is entering a new phase, moving beyond direct manipulation of UIs to conversational and delegated task execution. AI agents are rapidly becoming primary actors, capable of understanding complex user requests and executing multistep tasks autonomously. In commerce, this translates into a paradigm shift where agents will manage everything from routine purchases and subscription management to complex product research, price negotiation, and dynamic order bundling across multiple vendors. This new era of agent commerce promises to unlock immense value, offering users a hyper-personalized and frictionless shopping experience while providing merchants with new, intelligent channels to reach and serve customers.</p>"},{"location":"specification/#12-the-foundational-gap-a-crisis-of-trust-and-liability","title":"1.2 The Foundational Gap: A Crisis of Trust and Liability","text":"<p>Despite its promise, the rise of agent commerce exposes a critical vulnerability in the existing digital payments infrastructure. Today's payment protocols are designed around the principle of a human user directly interacting with a trusted interface, such as a merchant's website or a payment provider's app. Authentication, authorization, and liability are all predicated on this direct human involvement.</p> <p>Autonomous agents shatter this assumption. When an agent initiates a payment, fundamental questions arise that current systems are ill-equipped to answer:</p> <ul> <li>Authorization &amp; Auditability: What verifiable proof demonstrates that the     user granted the agent the specific authority to make this particular     purchase?</li> <li>Authenticity of Intent: How can a merchant or payment processor be certain     that the agent's request accurately reflects the human user's true intent?</li> <li>Agent Error and \"Hallucination\": How does the system protect against agent     errors, such as misinterpreting a user's request or \"hallucinating\" product     details, which could lead to incorrect purchases?</li> <li>Accountability: In the event of a fraudulent or erroneous transaction, who     is accountable? The user who delegated the task? The developer of the     shopping agent? The merchant who accepted the order? Or the payment network     that processed it?</li> </ul> <p>This ambiguity creates a crisis of trust. Without a robust framework to validate agent authority and assign liability clearly, financial institutions may be hesitant to approve agent-initiated transactions, merchants will be exposed to unacceptable levels of fraud risk, and users will be reluctant to delegate financial authority to agents.</p>"},{"location":"specification/#13-the-risk-of-a-fragmented-ecosystem","title":"1.3 The Risk of a Fragmented Ecosystem","text":"<p>In the absence of a universally adopted protocol, the industry will inevitably move toward a patchwork of proprietary, closed-loop solutions. Large retailers might develop bespoke integrations for their specific agents, and payment providers might create siloed ecosystems that do not interoperate. This fragmentation would have severe negative consequences:</p> <ul> <li>For Users: A confusing and inconsistent experience, where their preferred     agent may only work with a limited set of merchants or payment methods.</li> <li>For Merchants: High development and maintenance costs to support multiple,     non-standard agent payment integrations, creating a significant barrier to     entry for small and medium-sized businesses.</li> <li>For the Payments Ecosystem: An inability to collect common signals across     all agent transactions in order to consistently mitigate fraud, leading to     higher costs and suppressed transaction approval rates.</li> </ul> <p>An open, interoperable protocol is the most viable path forward. It creates a common language for all participants. It allows for additional data points to be shared about the transaction in a way that wasn\u2019t possible before and ensures that any compliant agent can securely transact with any compliant merchant, fostering a competitive and innovative marketplace.</p>"},{"location":"specification/#section-2-guiding-principles-for-a-trusted-agent-economy","title":"Section 2: Guiding Principles for a Trusted Agent Economy","text":"<p>The design of this proposed protocol is rooted in a set of core principles intended to build a sustainable, secure, and equitable ecosystem for all participants. These principles serve as the philosophical foundation for the technical architecture that follows.</p>"},{"location":"specification/#21-openness-and-interoperability","title":"2.1 Openness and Interoperability","text":"<p>This protocol is proposed as a non-proprietary, open extension for existing and future agent-to-agent (A2A) and model-context protocol (MCP). The goal is to provide a common, interoperable payments layer that can be adopted by any ecosystem player. This approach fosters a healthy, competitive environment where developers can innovate on agent capabilities, merchants can reach the broadest possible audience, and users can choose the combination of agents and services that best suits their needs.</p>"},{"location":"specification/#22-user-control-and-privacy-by-design","title":"2.2 User Control and Privacy by Design","text":"<p>The user must always be the ultimate authority. The protocol is designed to ensure users have granular control and transparent visibility over their agents' activities.</p> <p>Privacy is a core design tenet. The protocol is designed to protect sensitive user information, including the content of their conversational prompts and personal payment details. Through payload encryption and a role-based architecture, agents involved in the shopping process are prevented from accessing sensitive payment card industry (PCI) data or other personally identifiable information (PII), which is handled exclusively by the specialized entities and the secure elements of the payment infrastructure.</p>"},{"location":"specification/#23-verifiable-intent-not-inferred-action","title":"2.3 Verifiable Intent, Not Inferred Action","text":"<p>Trust in an AI Agent system cannot be based only on interpreting the ambiguous, probabilistic outputs of a large language model. Transactions must be anchored to deterministic, non-repudiable proof of intent from all parties. This principle directly addresses the risk of agent \"hallucination\" and misinterpretation.</p>"},{"location":"specification/#24-clear-transaction-accountability","title":"2.4 Clear Transaction Accountability","text":"<p>For the payments ecosystem to embrace agent commerce, there can be no ambiguity regarding transaction accountability. A primary objective of this protocol is to provide supporting evidence that helps payment networks establish accountability and liability principles. This clarity is table stakes for gaining the confidence and participation of merchants, issuers, and payment networks.</p>"},{"location":"specification/#section-3-architectural-overview-a-role-based-ecosystem-for-secure-transactions","title":"Section 3: Architectural Overview: A Role-Based Ecosystem for Secure Transactions","text":"<p>To achieve its goals of security, interoperability, and clear accountability, the proposed protocol defines a role-based architecture. Each actor in the ecosystem has a distinct and well-defined set of responsibilities, ensuring a separation of concerns that enhances security and simplifies integration.</p>"},{"location":"specification/#31-the-actors","title":"3.1 The Actors","text":"<p>The agent payments ecosystem consists of the following key roles:</p> <ul> <li>The User: The human individual who initiates a commerce task by     delegating it to their Agent. The User is the ultimate source of intent and     financial authority.</li> <li>The User Agent (UA) or Shopping Agent (SA) : This is the AI Surface that     the user directly interacts with. The User Agent (UA) may delegate the     commerce task to another AI Agent (say, the Shopping Agent or \u201cSA\u201d). Its     primary functions include understanding the user's needs, discovering     products, interacting with merchants to build a cart, and obtaining the     user's signed authorization to initiate a payment related task.</li> <li>The User\u2019s Credentials Provider (CP): A specialized entity responsible     for the secure management and execution of payments credentials (e.g. a     digital Wallet). It holds knowledge of the User's available payment methods,     gets user consent (if deemed necessary) to share credentials with the SA,     selects the optimal payment method based on user preferences and transaction     context, and handles payment scenarios like errors, declines and transaction     challenges gracefully.</li> <li>The Remote or Merchant Endpoint (ME): A web interface, MCP endpoint or     an AI agent operating on behalf of an entity which expects to receive a     payment in return for offering products or services. Its objectives are to     showcase products/services, provide information, negotiate the contents of a     cart with a Shopping Agent, and confirm that it has enough information about     the user\u2019s intent to deliver the right products/services.</li> <li>The Merchant Payment Processor Endpoint (MPP): The Merchant Payment     Processor (web, API, MCP or AI Agent) may be the same as the Merchant if the     Merchant has all the capabilities to fulfill this role. The MPP constructs     the txn auth message which can be sent to the payment ecosystem for     authorization.</li> <li>Network and Issuer: The provider of the payment network and issuer of     payment credentials to the human user. The Credentials Provider may need to     interact with the network for issuance of specific tokens for AI agent     transactions and the Merchant/PSP may submit these transactions for     authorization to issuers via the networks.</li> </ul> <p></p>"},{"location":"specification/#32-the-flow-of-trust","title":"3.2 The Flow of Trust","text":""},{"location":"specification/#321-short-term","title":"3.2.1 Short Term","text":"<p>In the immediate future, payment ecosystem trust will be established through manually curated allow lists of approved agents.</p> <ul> <li>The Shopping Agent may choose to work with a trusted registry of Credential     Providers</li> <li>The Credential Provider may choose to work with a trusted registry of     Shopping Agents</li> <li>The Shopping Agent will define which merchants it can safely support. This     may be through pre-established integrations or real-time discovery via     web-crawling or other agentic capabilities. Inversely, merchants may also     have a trust registry of Shopping Agents.</li> </ul> <p>These registries are decentralized and manually curated by the entity owners (e.g. Shopping Agent provider decides that they want to allowlist limited popular credentials providers but not any others). This is less work than the industry current approach of point-to-point integrations where there is development work required for every bespoke integration.</p> <p></p> <p></p>"},{"location":"specification/#322-long-term","title":"3.2.2 Long Term","text":"<p>In the long term, we anticipate that both MCP and A2A protocols will incorporate additional methods for asserting the identities of both the Agent and the User it represents. This will enable Merchant or Shopping Agents to identify a Credentials Provider and facilitate the real-time establishment of trust between them. Consequently, the Credentials Provider can verify that a Shopping Agent is operating on behalf of johndoe@gmail.com, and that a specific merchant endpoint is genuinely representing a real merchant. Similarly, the Credentials Provider should be trusted by the Shopping Agent &amp; Merchant Endpoint to be authentic and to appropriately represent johndoe@gmail.com. This trust framework will leverage and extend established web standards such as HTTPS, DNS ownership, mTLS, and API key-exchange.</p>"},{"location":"specification/#section-4-trust-anchors-verifiable-digital-credentials-mandates","title":"Section 4: Trust Anchors: Verifiable Digital Credentials &amp; Mandates","text":"<p>The central innovation of this protocol is the mechanism by which it engineers trust into a distributed and potentially adversarial environment. This is accomplished through the interplay of a set of standardized, cryptographically secure data objects known as verifiable digital credentials (VDCs).</p>"},{"location":"specification/#41-the-language-of-trust-verifiable-digital-credentials-vdcs","title":"4.1 The Language of Trust: Verifiable Digital Credentials (VDCs)","text":"<p>Verifiable digital credentials are the standardized data structures used to convey trusted information between agents. They are tamper-evident, non-disputable, portable, and cryptographically signed digital objects that serve as the building blocks of a transaction. The primary VDCs in this framework are the Cart Mandate, the Intent Mandate and the Payment Mandate.</p>"},{"location":"specification/#411-the-cart-mandate","title":"4.1.1 The Cart Mandate","text":"<p>The Cart Mandate is the foundational credential that captures the user's authorization for a purchase when the human is present at the time of purchase (see illustrative user journey). It is generated by the Merchant based on the user's request and is cryptographically signed by the user, typically using a hardware-backed key on their device with in-session authentication. This signature binds the user's identity and authorization to their intent. The Cart Mandate is a structured object containing critical parameters that define the scope of the transaction.</p> <p>A Cart Mandate contains the following bound information:</p> <ul> <li>Payer and Payee Information: Verifiable identities for the user, the     merchant, and their respective Credential Providers.</li> <li>Payment Method: A tokenized representation of the single, specific payment     method to be charged, as selected by the Credentials Provider and confirmed     by the user.</li> <li>Risk Payload: A container for risk-related signals required by merchants,     payment processors and issuers</li> <li>Transaction Details: The final, exact transaction products, destination     (email or physical address), amount and currency.</li> <li>If applicable, the conditions under which the purchase can be refundable</li> </ul>"},{"location":"specification/#412-the-intent-mandate","title":"4.1.2 The Intent Mandate","text":"<p>The Intent Mandate is a separate verifiable digital credential which is critical for scenarios where the human is not present at actual transaction time (see how this plugs into the \u201chuman not present\u201d journey). It serves as the final, non-repudiable authorization to execute a purchase in the user\u2019s absence. It is generated by the Shopping Agent based on the user's request and is cryptographically signed by the user, typically using a hardware-backed key on their device.</p> <p>An Intent Mandate may contain the following bound information (note that some of it may vary depending on human-present and human-not-present scenario):</p> <ul> <li>Payer and Payee Information: Verifiable identities for the user, the     merchant, and their respective Credential Providers.</li> <li>Chargeable Payment Methods: A list or category of payment methods the user     has authorized for the transaction.</li> <li>Risk Payload: A container for risk-related signals required by merchants,     payment processors and issuers</li> <li>Shopping Intent: Parameters defining the purchase, such as product     categories, or specific SKUs and relevant purchase decision criteria like     refundability.</li> <li>Prompt Playback: The Agent\u2019s understanding of the User\u2019s prompt in natural     language.</li> <li>Time-to-Live (TTL): An expiration time for the mandate's validity.</li> </ul>"},{"location":"specification/#413-the-payment-mandate-for-ai-agent-visibility-to-payments-ecosystem","title":"4.1.3 The Payment Mandate for AI Agent Visibility to Payments Ecosystem","text":"<p>While the Cart and Intent mandates are required by the merchant to fulfill the order, separately the protocol provides additional visibility into the agentic transaction to the payments ecosystem. For this purpose, a verifiable digital credential \u201cPaymentMandate\u201d (bound to Cart/Intent mandate but containing separate information) may be shared with the network/issuer along with the standard transaction authorization messages. The PaymentMandate\u2019s goal is to help the network/issuer build trust into the agentic transaction and it contains the below information.</p> <ul> <li>AI Agent presence and transaction modality (Human Present v/s Not Present)     signals must always be shared</li> <li>With user consent, the issuer and/or network may contractually enforce rules     which require the sharing of additional information present in Cart and/or     Intent Mandates for purposes such as fraud prevention.</li> <li>At time of disputes, merchants may use the full cart and/or intent mandates     as evidence during representment with the network/issuer as defined by     network rules.</li> </ul> <p>This architecture represents a significant evolution from traditional, imperative API calls (e.g., <code>create_order</code>) to a model of \"contractual conversation.\" The protocol messages are not simply commands; they are steps in a formal, auditable negotiation that culminates in a binding digital contract. This declarative, consensus-driven model is inherently more secure and robust for the complex, multi-party interactions that will define the agentic era, providing a far stronger foundation for trust and dispute resolution than any client-server API model can offer and paves the way for future security enhancements like Digital Payment Credentials and other cryptographic approaches.</p>"},{"location":"specification/#section-5-core-user-journeys","title":"Section 5: Core User Journeys","text":""},{"location":"specification/#51-human-present-transaction","title":"5.1 Human Present Transaction","text":"<p>Human delegates a task to an AI Agent which requires a payment to be made (say, shopping) and human is available when the payment has to be authorized. A typical (but not only) way this may happen is as below:</p> <ul> <li> <p>Setup: The User may set up a connection between their preferred Shopping     Agent &amp; any of the supported Credential Providers. This may require the User     to authenticate themselves on a surface owned by the Credential Provider.</p> </li> <li> <p>Discovery &amp; Negotiation: The User provides a shopping task to their chosen     AI Agent (which may activate a specialized Shopping Agent to complete the     task). The Shopping Agent interacts with one or more Merchants to assemble     a cart that satisfies the User's request. This may include the ability for     the merchant to provide loyalty, offers, cross-sell and up-sell information     (via the integration between the Shopping Agent &amp; Merchant) which the     Shopping Agent should represent to the user .</p> </li> <li> <p>Merchant Validates Cart: A SKU or set of SKUs are authorized by the User for     purchase. This is communicated by the Shopping Agent to the Merchant to     initiate order creation. The Merchant must sign the Cart that they create     for a user, signaling that they will fulfill this cart.</p> </li> <li> <p>Provide Payment Methods: The Shopping Agent may provide the payment context     to the Credentials Provider and request an applicable payment method (shared     as a reference or in encrypted form), along with any loyalty/discount     information which may be relevant for the payment method selection (say,     card points which can be redeemed towards the txn).</p> </li> <li> <p>Show Cart: The Shopping Agent presents the final cart and applicable payment     method to the user in a trusted surface and the user can approve it via an     authentication process.</p> </li> <li> <p>Sign &amp; Pay: The user\u2019s signed approval must create a cryptographically     signed \u201cCart Mandate\u201d. This mandate contains the explicit goods being     purchased &amp; their confirmation of purchase. It is shared with the Merchant     so they can use this as evidence in case of disputes. Separately, the     PaymentMandate (containing agent involvement &amp; Human-Present signals) may     be shared with the network &amp; issuer for transaction authorization.</p> </li> <li> <p>Payment Execution: The payment subset of the \u201cCart Mandate\u201d must be conveyed     to the Credential provider and Merchant to complete the transaction. There     may be multiple ways this might happen. For example,</p> <ul> <li>The Shopping Agent (SA) may request Credentials Provider to complete a     payment with the Merchant OR,</li> <li>the SA may submit an order with the merchant, triggering a payment     authorization flow where the merchant/PSP requests payment method from     the Credentials Provider.</li> </ul> </li> <li> <p>Send Transaction to Issuer: The Merchant or PSP routes the transaction to     the issuer or the network within which the payment method operates. The     transaction packet may be appended with AI agent presence signals ensuring     network/issuer get visibility into agentic transactions.</p> </li> <li> <p>Challenge: Any party (issuer, credential provider, merchant etc.) may choose     to challenge the transaction through existing mechanisms like 3DS2. This     challenge needs to be presented to the user by the User Agent (an example     of this would be a hosted 3DS) and may require a redirect to a trusted     surface to complete.</p> </li> <li> <p>Resolve Challenge: The user should have a way to resolve the challenge on a     trusted surface (say, banking app, website etc.)</p> </li> <li> <p>Authorize Transaction: The issuer approves the payment and confirms success     back. This is communicated to the User and the Merchant so that the order     can be fulfilled. A payment receipt is shared with the Credential Provider     confirming the transaction result. In case of a decline, that can also be     appropriately communicated.</p> </li> </ul>"},{"location":"specification/#52-human-not-present-transaction","title":"5.2 Human Not Present Transaction","text":"<p>Human delegates a task to an AI Agent which requires a payment to be made (say, shopping) and human wants the AI Agent to proceed with the payment in their absence. Some canonical scenarios here could be \u201cbuy these shoes for me when the price drops below $100\u201d or \u201cbuy 2 tickets to this concert as soon as they become available, make sure we\u2019re close to the main stage but don\u2019t spend more than $1000\u201d.</p> <p>Key changes from the Human Present modality are noted below:</p> <ol> <li> <p>\u201cCart Prompt Not Required\u201d: The Agent must repeat back to the User what they    think they are expected to purchase. The User must approve this and confirm    that they would like the agent to proceed with the purchase in their absence.    This is done by the User going through in-session authentication (biometric    etc.) to confirm their intent.</p> </li> <li> <p>\u201cIntent Mandate\u201d is signed by the user instead of the \u201cCart Mandate\u201d in    \u201cHuman Not Present\u201d scenarios. \u201cIntent Mandate\u201d includes the natural language    description of the user\u2019s intent as understood by the AI Agent. This is    signed by the user and shared with the Merchant so they can decide if they    are able to fulfill the user\u2019s requirement.</p> </li> <li> <p>Merchant can force user confirmation: If the Merchant is unsure about their    ability to fulfill the user\u2019s needs, they can force the user to come back    into session to confirm. Here, the merchant can require either (i) the user    select from among a set of SKUs presented to them or (ii) provide answers to    additional questions that the merchant needs to know. (i) can lead to    creation of Human-Present cart mandate and (ii) can lead to updating the    \u201cintent mandate\u201d with more information. This ensures that the Merchants get    more confidence on the user\u2019s intent if they are unsure. Merchants may    balance transaction conversion rates with returns/user dissatisfaction to    decide when they want to force users to provide additional confirmation.</p> </li> </ol> <p>Example Scenario</p> <ul> <li>User says to SA: \"Buy 2 tickets to \\&lt;this concert&gt; from \\&lt;this     merchant&gt; as soon as they become available for the Vegas show in July.     Your budget is $1000 and we\u2019d like to be as close to the main stage as     possible\"</li> <li>User signs this as an Intent Mandate allowing the SA to purchase in the     user\u2019s absence.</li> <li>Merchant receives this intent mandate and then they can say \"I have 3     variations of seating which fulfill this criteria and I don\u2019t know which one     the user wants. The intent mandate is not sufficient for me to fulfill this     order\".</li> <li>The merchant can respond to the SA and say that I want to show the user the     final 3 options.</li> <li>SA notifies the user that their presence is needed before the txn can be     initiated. User sees the 3 options, picks one and can now sign a \"Cart     Mandate\" which gives the merchant evidence that the user knows exactly what     they are getting.</li> </ul> <p>Alternatively, the merchant may have decided to fulfill the order with the cheapest tickets which meet the criteria. This would be up to the merchant and they can decide when they want to bring the user back into session and when they are able to fulfill the order without bringing the user back.</p>"},{"location":"specification/#53-payment-method-addition","title":"5.3 Payment Method Addition","text":"<p>Depending on their risk appetite, merchants should have the ability to require a minimum level of security associated with the payment method if it\u2019s going to be accepted for an agentic transaction. Payment networks may also define security or tokenization requirements for agentic transactions which should be enforced by the merchant before a transaction can be initiated.</p> <p>If the User initiates a purchase request with a Shopping Agent without having any eligible payment methods with their Credentials Provider, the CP should be able to provide instruction to the User via the Shopping Agent on setting up a payment method and making it ready for agentic transactions. This may require a tokenization flow which the user may have to perform on a trusted Payments surface owned by the Credentials Provider or the network/issuer.</p>"},{"location":"specification/#54-payment-method-selection","title":"5.4 Payment Method Selection","text":"<p>The merchant will define what payment methods they accept and the associated fees. If applicable, the merchant will also declare what processor they use. If the payment method is a push payment method, the merchant will define where to push funds to. Once in the context of a cart, the merchant can define the subset of supported payment methods.</p> <p>The merchant can also declare that they already have user payment methods stored \u201con file\u201d in which case the Shopping Agent may not need to use a Credentials Provider.</p> <p>The Credentials Provider knows what payment methods the user has available. The Shopping Agent will be able to inquire about the user\u2019s payment methods to ensure that the user payment methods are compatible with the Merchant\u2019s accepted payment methods.</p>"},{"location":"specification/#55-transaction-challenges","title":"5.5 Transaction Challenges","text":"<p>Any player in the ecosystem can require a user challenge during a payment flow. For v0.1, this will be a redirect challenge passed back to the Shopping Agent to surface to the User. The User will be redirected to a trusted surface to complete the challenge. This will allow for current user challenges like 3DS2, or OTPs to be used as challenges for agentic transactions.</p> <p>The Credential Provider should be aware when a challenge is performed, so that the information of a successful challenge-type can be passed to the relevant entities (merchants &amp; issuers) ensuring the user is not challenged twice if the issuer or merchant already trusts the completed challenges. For the \u201cHuman Not Present\u201d scenario, a transaction challenge will force the user to come into session. All existing risk systems that merchants, networks &amp; issuers have instituted, should still be able to reason over the data they are receiving and identify when the challenges are needed, ensuring backward compatibility.</p>"},{"location":"specification/#section-6-enabling-dispute-resolution","title":"Section 6: Enabling Dispute Resolution","text":"<p>A clear and predictable framework for handling disputed transactions is paramount for the adoption of any new payment protocol by financial institutions, merchants, and users. This protocol is designed to provide a certified, evidence-based system for assigning accountability.</p>"},{"location":"specification/#core-principles","title":"Core Principles","text":"<p>The foundational principles are that accountability should</p> <ol> <li>Stay similar to existing regulations and processes as much as possible,    innovate only where needed</li> <li>Follow verifiable proof using the cryptographic chain of evidence which    creates a non-repudiable audit trail</li> <li>Land on a real-world entity (user, merchant or issuer) for the vast majority    of cases and only land on an AI Agent if a load bearing decision made by the    AI Agent is determined to be wrong (such as, Agent Account Takeover leading    to purchases on behalf of a good user by a fraudster).</li> </ol> <p>In the event of a dispute, the network adjudicator (Card Network, e-Wallet provider, govt agency etc.) can receive additional information from the Merchant, including the cart, hash, and cart/intent mandate along with the evidence which they already collect. The adjudicator can then make a decision on whether the user approved the final cart and the merchant delivered what the user requested.</p> <p>This process is consciously kept similar to existing dispute flows, especially in the Card network, allowing merchants to plug in additional evidence which supports them in disputes allowing them to participate in agentic transactions with confidence.</p> <p>The following table outlines how liability could be allocated in several common failure scenarios, based on the evidence available within the protocol. Note that every payment network will define its own liability contracts and so this table only provides a helpful guide, not a binding contract of any kind.</p> <p>Table 6.1: New Evidence in Common Scenarios</p> Scenario Type Description Key Evidence First-Party Misuse The legitimate user initiates a purchase but later claims it was fraudulent to obtain a refund. User-signed Cart Mandate or Intent Mandate Verifiable Digital Credential (VDC) Mispick, Approved by User The Shopping Agent selects the wrong item (e.g., blue shoes instead of red), but the user explicitly approves the final cart containing the wrong item. The cart mandate VDC, signed by the user's device key, shows the incorrect item. Mispick, Unapproved by User The Shopping Agent autonomously purchases an item that violates the user's signed Intent Mandate (e.g., exceeds budget or is the wrong item). The Intent Mandate vs. the cart transaction details should show the discrepancy. Merchant Non-Fulfillment The merchant accepts payment for an order but fails to ship the goods or render the service. A valid Cart/Intent Mandate and payment confirmation vs. the absence of a valid shipping/fulfillment confirmation from the merchant. Account Takeover (ATO) A fraudster gains control of a user's account and uses their AI Agent to make unauthorized purchases with pre-existing payment methods in the user\u2019s Credentials Provider. Analysis of authentication signals during the session and mandate signing. Man-in-the-Middle Attack An attacker intercepts and alters a transaction payload in transit (e.g., changes the shipping address). Verification of digital signatures and payload integrity. The signed VDCs are designed to make this infeasible."},{"location":"specification/#section-7-technical-implementation","title":"Section 7: Technical Implementation","text":"<p>Based on the roadmap defined at the beginning of this document, this section will focus on the technical implementation for the Human-Present scenario in the specific case where all entities are Agentic - User/Shopping Agent, Merchant, and Credentials Provider. This would mean that these entities leverage the A2A protocol for information exchange.</p> <p>We consider MCP to be equally important and plan to follow up with reference implementations where some entities may be MCP very soon after publishing the first version of the specifications.</p>"},{"location":"specification/#71-illustrative-transaction-flow","title":"7.1 Illustrative Transaction Flow","text":"<pre><code>---\nconfig:\n  look: neo\n  theme: redux-color\n---\nsequenceDiagram\n    participant user as User\n    participant sa   as Shopping Agent\n    participant cp   as Credential Provider\n    participant ma   as Merchant Agent\n    participant m    as Merchant\n    participant mpp  as Merchant Payment Processor\n\n    user -&gt;&gt; sa: 1. Shopping Prompts\n    sa   -&gt;&gt; user: 2. IntentMandate confirmation\n    user --) sa: 3. Confirm\n\n    user -&gt;&gt; sa: 4. (optional) Credential Provider\n    user -&gt;&gt; sa: 5. (optional) Shipping Address\n\n    sa -&gt;&gt; cp: 6. Get Payment Methods\n    cp --) sa: 7. { payment methods }\n\n    sa -&gt;&gt; ma: 8. IntentMandate\n    note over ma: 9. Create CartMandate\n\n    ma -&gt;&gt; m: 10. sign CartMandate\n    m --) ma: 11. { signed CartMandate }\n\n    ma --) sa: 12. { signed CartMandate }\n\n    sa -&gt;&gt; cp: 13. Get user payment options\n    cp --) sa: 14. { payment options }\n\n    sa -&gt;&gt; user: 15a. Show CartMandate\n    sa -&gt;&gt; user: 15b. Payment Options Prompt\n\n    user --) sa: 16. payment method selection\n\n    sa -&gt;&gt; cp: 17. Get payment method token\n    cp --) sa: 18. { token }\n\n    note over sa: 19. Create PaymentMandate\n\n    sa -&gt;&gt; user: 20. Redirect to trusted device surface&lt;br/&gt;{ PaymentMandate, CartMandate }\n    note over user: 21. User confirms purchase&lt;br/&gt;&amp; device creates attestation\n    user --) sa: 22. { attestation }\n\n    sa -&gt;&gt; cp: 23. PaymentMandate + attestation\n\n    note over cp: Tokenization call to Network, if applicable.&lt;br/&gt;Request Agent Token from Payment Mandate and&lt;br/&gt;any needed supplemental transaction data.\n\n    sa -&gt;&gt; ma: 24. purchase { PaymentMandate + attestation }\n\n    ma  -&gt;&gt; mpp: 25. initiate payment { PaymentMandate + attestation }\n    mpp -&gt;&gt; cp:  26. request payment credentials { PaymentMandate }\n    cp  --) mpp: 27. { payment credentials }\n\n    note over mpp: 28. Process payment\n    mpp -&gt;&gt; cp: 29. Payment receipt\n    mpp -&gt;&gt; ma: 30. Payment receipt\n    ma  --) sa: 31. Payment receipt\n    sa  -&gt;&gt; user: 32. Purchase completed + receipt</code></pre> <p>Some salient points of the flow diagram:</p> <ul> <li>Step 4: The user may need to provide a shipping address or the Shopping     Agent may already have it based on the user's preferences/settings. This is     to ensure the price in the cart is final. All selections that may alter a     cart price must be completed prior to the CartMandate being able to be     created.</li> <li>Step 6: The cart mandate is first signed by the merchant entity (not an     Agent) to guarantee they will fulfill the order based on the SKU, price and     shipping information. This ensures that the user sees a cart (in step 12)     which the merchant has confirmed to fulfill.</li> <li>Step 10: Payment Options may be received from a Credentials Provider or may     be supplied by the merchant directly in case they already stored payment     method information.</li> <li>Step 13: The user may be required to step up their payment method through a     security/tokenization flow if the payment network has specific     security/tokenization requirements for AI Agent transactions.</li> <li>Step 14: The PaymentMandate contains information that can be appended to the     existing transaction authorization packet which will provide visibility to     PSP/Networks/Issuers that the transaction had AI Agent involvement and its     modality (Human Present or Human Not Present).<ul> <li>Note that this is distinct from the \u201cCart Mandate\u201d which contains all     the information which a merchant requires to fulfill the order.</li> </ul> </li> <li>Step 15: This is the load bearing step where the user verifies everything     and proceed to make a purchase</li> <li>Step 21: While not shown in the diagram we expect the PSP to send the     transaction authorization message (along with the PaymentMandate) to     supporting networks/issuers, allowing these parties to reason over the     transactions and make a decision (approve/deny/challenge).</li> </ul>"},{"location":"specification/#72-code-samples","title":"7.2 Code Samples","text":""},{"location":"specification/#sample-merchant-agent-card","title":"Sample Merchant Agent Card","text":"<pre><code>{\n  \"name\": \"MerchantAgent\",\n  \"description\": \"A sales assistant agent for a merchant.\",\n  \"capabilities\": {\n    \"extensions\": [\n      {\n        \"description\": \"Supports the A2A payments extension.\",\n        \"required\": true,\n        \"uri\": \"https://google-a2a.github.io/A2A/ext/payments/v1\"\n      },\n      {\n        \"description\": \"Supports the Visa payment method extension\",\n        \"required\": true,\n        \"uri\": \"https://visa.github.io/paymentmethod/types/v1\"\n      }\n    ]\n  },\n  \"skills\": [\n    {\n      \"id\": \"search_catalog\",\n      \"name\": \"Search Catalog\",\n      \"description\": \"Finds items in the merchant's catalog\",\n      \"tags\": [\"merchant\", \"search\", \"catalog\"]\n    }\n  ],\n  \"url\": \"http://example.com/a2a/merchant_agent\",\n  \"version\": \"1.0.0\"\n}\n</code></pre>"},{"location":"specification/#sample-credential-provider-agent-card","title":"Sample Credential Provider Agent Card","text":"<pre><code>{\n  \"name\": \"CredentialProvider\",\n  \"description\": \"An agent that holds a user's payment credentials.\",\n  \"capabilities\": {\n    \"extensions\": [\n      {\n        \"description\": \"Supports the A2A payments extension.\",\n        \"required\": true,\n        \"uri\": \"https://google-a2a.github.io/A2A/extensions/payments/v1\"\n      },\n      {\n        \"description\": \"Supports the Visa payment method extension\",\n        \"required\": true,\n        \"uri\": \"https://visa.github.io/paymentmethod/types/v1\"\n      }\n    ]\n  },\n  \"security\": [\n    {\n      \"oauth2\": [\"get_payment_methods\"]\n    }\n  ],\n  \"securitySchemes\": {\n    \"oauth2\": {\n      \"flows\": {\n        \"authorizationCode\": {\n          \"authorizationUrl\": \"http://example.com/auth\",\n          \"scopes\": {\n            \"get_payment_methods\": \"description\"\n          },\n          \"tokenUrl\": \"http://127.0.0.1:8080/token\"\n        }\n      },\n      \"type\": \"oauth2\"\n    }\n  },\n  \"skills\": [\n    {\n      \"id\": \"get_eligible_payment_methods\",\n      \"description\": \"Provides a list of payment methods for a purchase.\",\n      \"name\": \"Get Eligible Payment Methods\",\n      \"tags\": [\"eligible\", \"payment\", \"methods\"]\n    },\n    {\n      \"id\": \"get_account_shipping_address\",\n      \"description\": \"Fetches the shipping address in the user's account.\",\n      \"name\": \"Get Shipping Address\",\n      \"tags\": [\"account\", \"shipping\"]\n    }\n  ],\n  \"url\": \"http://example.com/a2a/credential_provider\",\n  \"version\": \"1.0.0\"\n}\n</code></pre>"},{"location":"specification/#sample-cartmandate","title":"Sample <code>CartMandate</code>","text":"<pre><code>{\n  \"contents\": {\n    \"id\": \"cart_shoes_123\",\n    \"user_signature_required\": false,\n    \"payment_request\": {\n      \"method_data\": [\n        {\n          \"supported_methods\": \"CARD\",\n          \"data\": {\n            \"payment_processor_url\": \"http://example.com/pay\"\n          }\n        }\n      ],\n      \"details\": {\n        \"id\": \"order_shoes_123\",\n        \"displayItems\": [\n          {\n            \"label\": \"Nike Air Max 90\",\n            \"amount\": {\n              \"currency\": \"USD\",\n              \"value\": 120.0\n            }\n          }\n        ],\n        \"shipping_options\": null,\n        \"modifiers\": null,\n        \"total\": {\n          \"label\": \"Total\",\n          \"amount\": {\n            \"currency\": \"USD\",\n            \"value\": 120.0\n          }\n        }\n      },\n      \"options\": {\n        \"requestPayerName\": false,\n        \"requestPayerEmail\": false,\n        \"requestPayerPhone\": false,\n        \"requestShipping\": true,\n        \"shippingType\": null\n      }\n    }\n  },\n  \"merchant_signature\": \"sig_merchant_shoes_abc1\",\n  \"timestamp\": \"2025-08-26T19:36:36.377022Z\"\n}\n</code></pre>"},{"location":"specification/#sample-paymentmandate","title":"Sample <code>PaymentMandate</code>","text":"<pre><code>{\n  \"payment_mandate_contents\": {\n    \"payment_mandate_id\": \"pm_12345\",\n    \"payment_details_id\": \"order_shoes_123\",\n    \"payment_details_total\": {\n      \"label\": \"Total\",\n      \"amount\": {\n        \"currency\": \"USD\",\n        \"value\": 120.0\n      },\n      \"refund_period\": 30\n    },\n    \"payment_response\": {\n      \"request_id\": \"order_shoes_123\",\n      \"method_name\": \"CARD\",\n      \"details\": {\n        \"token\": \"xyz789\"\n      },\n      \"shipping_address\": null,\n      \"shipping_option\": null,\n      \"payer_name\": null,\n      \"payer_email\": null,\n      \"payer_phone\": null\n    },\n    \"merchant_agent\": \"MerchantAgent\",\n    \"timestamp\": \"2025-08-26T19:36:36.377022Z\"\n  },\n  \"user_authorization\": \"eyJhbGciOiJFUzI1NksiLCJraWQiOiJkaWQ6ZXhhbXBsZ...\"\n}\n</code></pre>"},{"location":"specification/#73-dispute-flows","title":"7.3 Dispute Flows","text":"<p>The protocol allows merchants to receive additional evidence, in the form of intent and cart mandates. These are secure, immutable JSON blobs which are proof of what was agreed to, by the human and the merchant at time of transaction. These JSONs are signed by a key (say, a device key) which is backed by an entity (say, the issuer) which attests that the key is good.</p> <p>In the case of a dispute, this additional evidence along with the public key can be shared with the adjudicating authority allowing them to validate the authenticity of the JSON blob and get access to the specific instructions which led to the purchase. This allows the adjudicator to use this data along with existing disputes data to make decisions on which party may be accountable for the transaction.</p>"},{"location":"specification/#74-risk-signals","title":"7.4: Risk Signals","text":"<p>Every entity in the payments ecosystem has well-defined processes for managing risk and reducing fraud. The protocol does not aim to be opinionated about risk/fraud handling or enforce any changes to well-established systems. This section provides our early thinking into how the landscape may evolve.</p> <p>Since the user now interacts with a Shopping Agent, which in turn interacts with Credential Providers and Merchants, there are a few novel implications to consider:</p> <ul> <li>User Asynchronicity: The user may no longer be in-session for the entire     payment journey.</li> <li>Delegated Trust: Actors must now trust an agent to initiate a payment on the     user's behalf.</li> <li>Mandate-Merchant Matching: Mandates for purchases must be accurately matched     to the intended merchant.</li> <li>Temporal Gaps: Payment method tokens may be generated significantly before a     transaction is executed, creating a window of opportunity for misuse.</li> <li>Indirect Trust Establishment: The Credential Provider may not have a direct     engagement with the merchant and must rely on the Shopping Agent to     establish trust.</li> <li>Agent Identity: The Shopping Agent's ID becomes synonymous with a bot's     identity, which requires new methods of verification and trust.</li> </ul> <p>These changes require each actor to reevaluate how they establish trust and manage risk. The Credential providers must now expand their verification from user and instrument ownership to identifying Shopping Agent as well.</p> <p>Similarly, the Merchant's traditional concerns are amplified, leading them to question not only how they can trust the user, but also how they can securely access user instruments, receive payment, and obtain the necessary data in a landscape mediated by an agent.</p> <p>The v0.1 implementation includes a Risk field in the JSON exchange between the various entities but it is intentionally left open-ended for now since we expect different players in the industry to assess the right signals which should be included based on different risk appetites and business models.</p>"},{"location":"specification/#section-8-looking-ahead-enabling-dynamic-commerce","title":"Section 8: Looking Ahead: Enabling Dynamic Commerce","text":"<p>This protocol does more than just secure simple purchases. Its flexible design provides a foundation for the advanced and dynamic commerce models of the future.</p> <p>Imagine a user wants to buy a specific jacket, but the color they want is listed as \"unavailable\" on the merchant's website. Normally, this is a lost sale. But with this protocol, it is plausible to imagine that the user could tell their agent, \"I really want this jacket in green, and I'm willing to pay up to 20% more for it.\" The agent can then create a signed Intent Mandate with these specific details.</p> <p>The merchant's agent receives this mandate and, instead of an automatic \"out of stock\" response, can recognize the high-value intent. It could check back-end inventory for a potential return, place a special order, or even make a production exception. It then presents a new, higher-priced offer back to the user's agent. If the user accepts, Cart Mandate and Payment Mandate are both signed, and a purchase is completed that would have otherwise been impossible. This allows the merchant to capture a high-intent sale and receive direct, valuable feedback on product demand, turning a dead end into a successful transaction.</p>"},{"location":"specification/#section-9-a-call-for-ecosystem-collaboration","title":"Section 9: A Call for Ecosystem Collaboration","text":"<p>The Agent Payments Protocol provides a mechanism for secure payments, but it's part of a larger picture. We acknowledge that there are adjacent problems which need to be solved if we want to provide a truly seamless experience. The protocol leaves these areas open for the ecosystem to innovate. Some of the biggest building blocks are:</p>"},{"location":"specification/#real-time-trust-establishment","title":"Real Time Trust Establishment","text":"<p>At the top of the funnel, the Shopping Agent needs to be able to discover Merchant endpoints (either AI Agent or MCP) and establish a high-grade of trust with them so that, later, a payment can be initiated between these parties. In the short term, we expect this to happen through decentralized allowlist of registries which ensure that AI Agents and merchants can establish trust among themselves. Longer term, we expect this to be enabled by new discovery &amp; verification standards.</p>"},{"location":"specification/#delegated-authorization","title":"Delegated Authorization","text":"<p>An agent needs a secure and easy way to get scoped permissions to act on a user's behalf. Early versions can use existing methods like redirects or one-time passcodes. However, the long-term goal is to move toward solutions that offer more granular, time-bound access controls for agents.</p>"},{"location":"specification/#issuance-of-trusted-public-keys","title":"Issuance of Trusted Public Keys","text":"<p>The protocol's security relies on information being cryptographically signed by the user and merchant. But this raises a crucial question: how are the public keys that verify these signatures distributed, and why should anyone trust them? Establishing these \"roots of trust\" is a critical area for innovation. Several exciting pathways could emerge where these keys could be issued by issuers, payment networks, governments, merchants or third-party networks which are trusted by the ecosystem.</p> <p>Solving these challenges is a community effort and is essential for unlocking the full, secure potential of agent commerce.</p>"},{"location":"specification/#glossary","title":"Glossary","text":"Term Acronym Definition Context Synonym/Related Agent Payments Protocol AP2 An open protocol designed to enable AI agents to securely interoperate and complete payments autonomously. Agent2Agent Protocol A2A An open standard for secure, collaborative communication and task management between diverse AI agents, regardless of their underlying frameworks. A Payments Extension is being developed to facilitate financial transactions, with a focus on high-trust agentic payments. Agentic payments Payment flows in which autonomous AI Agents are involved Credentials Provider CP A secure entity, like a digital wallet, responsible for managing and executing the user's payment and identity credentials. Deterministic cryptographical proof A unique mathematical proof that could be linked to a hardware device Dynamic Linking A core requirement for Strong Customer Authentication (SCA), involving the inclusion of specific transaction details within a Payment Credential to link the SCA to that transaction. Ensures the payer explicitly consents to transaction details like amount and payee. Merchant Endpoint (Or Remote Endpoint) ME, RE The web interface or AI agent representing the seller, showcasing products and negotiating the cart. Merchant Payment Processor Endpoint MPP The entity responsible for constructing and sending the transaction authorization message to the payment ecosystem. Model Context Protocol MCP A protocol standardizing how AI models and agents connect to and interact with external resources like tools, APIs, and data sources. Payee A person or entity who is the intended recipient of funds from a payment transaction. Can request attestations along with payment confirmation. Merchant, Creditor Name Payer A person or entity who holds a payment account, allows a payment order from that account. Initiates payment orders. User, Holder Payment Agent A proposed key role in agent payments responsible for selecting the ideal payment method, validating payment details, and handling errors. A Payment Agent is not a necessary requirement to participate in the protocol. MCP-based endpoints can also play similar roles. Payment Contracts \"Mandates\" or \"Payment Contracts\" that capture a user's specific instructions to their agent. Define principles for safe, secure, and high-trust agentic payments. They can be global or transaction-level. Mandates, Shopping Mandate Payment Credential A credential or instrument (or reference to one) which can be charged towards a payment. Electronic Attestation of Attributes (EAA), Payment Wallet Attestation (PWA), Digital Payment Credentials (DPC), Payment Means Attestation, SPC Credential Payment Request API (W3C Standard) A web API that acts as an intermediary between a merchant, user, and payment method provider to streamline the payment experience. Strong Customer Authentication SCA A process required by regulatory frameworks for online identification and transaction initiation in financial services. Central to the Payments Rulebook, ensuring security and dynamic linking of transactions. Strong User Authentication, Integrated SCA User The human initiating the task and providing financial authority. User Agent a.k.a. Shopping Agent UA, SA The AI surface interacts directly with the user, understanding their needs, and coordinating the purchase. Verifiable digital credential VDC An Issuer-signed credential (i.e., a set of Claims) whose authenticity can be verified. Typically bound to a cryptographic key and used in the issuer-holder-verifier model. Digital Credential, Verifiable Credential Verifiable presentation VP A presentation of one or more VDCs that includes a cryptographic proof of holder binding, created in response to a request from a Verifier. Allows a Verifier to confirm that the Holder intended the presentation for them and may reveal only a subset of claims. <p>Copyright 2025 Google LLC. Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0</p>"},{"location":"topics/ap2-a2a-and-mcp/","title":"AP2, A2A, and MCP","text":"<p>The Agent Payments Protocol (AP2) is designed to be an extension of the Agent-to-Agent (A2A) protocol and work in concert with Model-Context Protocol (MCP).</p> <p>Communication disambiguation</p> <ul> <li>MCP: Agents communicate with data (APIs)</li> <li>A2A: Agents communicate with other Agents (tasks and messages)</li> <li>AP2: Agents communicate about payments (mandates)</li> </ul>"},{"location":"topics/ap2-a2a-and-mcp/#ap2-a2a-for-inter-agent-communication-for-payments","title":"AP2 + A2A for Inter-Agent Communication for Payments","text":"<p>The Agent Payments Protocol (AP2) is designed as an optional extension for open-source protocols like A2A and MCP, allowing developers to build upon existing work to create a secure and reliable framework for AI-driven payments.</p> <ul> <li>AP2 is required to standardize the communication payments details like     mandates.</li> <li>A2A is required to standardize intra-agent communication, as soon as you     have more than one agent you need A2A.</li> </ul> <p>AP2 directly extends the Agent-to-Agent (A2A) protocol for multi-agent payments transactions between actors like Shopping Agents, Merchants, and Credentials Providers.</p>"},{"location":"topics/ap2-a2a-and-mcp/#ap2-mcp-for-external-resource-interaction","title":"AP2 + MCP for External Resource Interaction","text":"<p>MCP is a protocol that standardizes how AI models and agents connect to and interact with external resources like tools, APIs, and data sources.</p> <p>Developers can implement their own tools to integrate with providers.</p> <p>We are working on MCP servers for AP2.</p> <p>In essence, A2A and MCP provide the foundational communication and interaction layers for AI agents, enabling them to connect and perform tasks. AP2 builds upon these layers by adding a specialized, secure payments extension, addressing the unique challenges of authorization, authenticity, and accountability in AI-driven payments. This allows agents to confidently browse, negotiate, buy, and sell on behalf of users by establishing verifiable proof of intent and clear accountability within transactions.</p>"},{"location":"topics/ap2-and-x402/","title":"AP2 and x402","text":"<p>The Agent Payments Protocol (AP2) and x402 are complementary. AP2 is designed to support emerging payment methods like x402, providing a secure and interoperable framework for AI agents to conduct transactions that may involve such digital currencies.</p> <p>Dedicated Repo</p> <p>Check out google-agentic-commerce/a2a-x402 which is an implementation of A2A in conjunction with the x402 standard. We will be aligning this closely with AP2 over time to make it easy to compose solutions which include all payment methods, including digital currencies.</p>"},{"location":"topics/ap2-and-x402/#payment-agnosticism-and-future-proof-design","title":"Payment Agnosticism and Future-Proof Design","text":"<p>AP2 is an open, interoperable protocol specifically engineered to enable AI agents to securely interact and complete payments autonomously. A core principle of AP2 is its payment-method-agnostic and future-proof design. The initial version supports common \"pull\" payment methods like credit/debit cards, with a roadmap to include \"push\" payments like real-time bank transfers and digital currencies. This flexible approach ensures that AP2 can evolve to support various ways people pay.</p>"},{"location":"topics/ap2-and-x402/#engineering-trust-for-agentic-transactions","title":"Engineering Trust for Agentic Transactions","text":"<p>AP2 introduces key concepts like Verifiable Credentials (VCs)\u2014including Intent Mandates, Cart Mandates, and Payment Mandates\u2014which are cryptographically signed digital objects that capture user authorization and intent. These VCs provide a non-repudiable audit trail for every transaction, establishing a clear framework for accountability and addressing the \"crisis of trust\" inherent in autonomous AI agent payments. This secure foundation is crucial for any payment method where validating agent authority and user intent is paramount.</p>"},{"location":"topics/ap2-and-x402/#industry-collaboration-and-implementation","title":"Industry Collaboration and Implementation","text":"<p>AP2 is being developed in collaboration with prominent partners in the payments and web3 ecosystems, including Coinbase, CrossMint, EigenLayer, Ethereum Foundation, Mesh, Metamask, and Mysten. Shared samples are currently being built to demonstrate AP2 and x402 working together in practical implementations.</p> <p>In essence, AP2 provides the overarching secure, interoperable protocol and trust mechanisms necessary for AI agents to make payments, while x402 represents a type of emerging payment method that AP2 is specifically designed to accommodate and support securely within the agentic payments ecosystem.</p>"},{"location":"topics/core-concepts/","title":"Core Concepts","text":"<p>The Agent Payments Protocol (AP2) is built on a foundation of core principles and a role-based architecture designed to create a secure, interoperable, and fair ecosystem.</p>"},{"location":"topics/core-concepts/#guiding-principles","title":"Guiding Principles","text":"<ul> <li>Openness and Interoperability: AP2 is an open, non-proprietary extension     for agent-to-agent protocols, fostering a competitive environment where any     compliant agent can work with any compliant merchant.</li> <li>User Control and Privacy: The user is always the ultimate authority. The     protocol is designed with privacy at its core, using a role-based     architecture and encryption to protect sensitive user data and payment     details.</li> <li>Verifiable Intent, Not Inferred Action: Trust is anchored to     deterministic, non-repudiable proof of intent from the user, directly     addressing the risk of agent error or \"hallucination.\"</li> <li>Clear Transaction Accountability: For the payments ecosystem to embrace     agentic payments, there can be no ambiguity regarding transaction     accountability. The protocol provides supporting evidence that helps payment     networks establish clear and fair principles for accountability and dispute     resolution. By creating a non-repudiable, cryptographic audit trail for     every transaction, the framework provides the evidence necessary to resolve     disputes confidently.</li> </ul>"},{"location":"topics/core-concepts/#a-role-based-architecture","title":"A Role-Based Architecture","text":"<p>The protocol defines a clear separation of concerns by assigning distinct roles to each actor in the ecosystem:</p> <ul> <li>The User: The individual who delegates a payments task to an agent.</li> <li>User Agent (UA) / Shopping Agent (SA): The AI surface the user interacts     with (e.g., Gemini, ChatGPT). It understands the user's needs, builds a     cart, and obtains the user's authorization.</li> <li>Credentials Provider (CP): A specialized entity (e.g., a digital wallet)     that securely manages the user's payment credentials and methods.</li> <li>Merchant Endpoint (ME): An interface or agent operating on behalf of the     merchant to showcase products and negotiate a cart.</li> <li>Merchant Payment Processor Endpoint (MPP): The entity that constructs the final     transaction authorization message for the payment network.</li> <li>Network and Issuer: The payment network and the financial institution     that issued the user's payment credentials.</li> </ul>"},{"location":"topics/core-concepts/#trust-anchors-verifiable-digital-credentials-vdcs","title":"Trust Anchors: Verifiable Digital Credentials (VDCs)","text":"<p>The central innovation of AP2 is the use of verifiable digital credentials (VDCs) to engineer trust. VDCs are tamper-evident, portable, and cryptographically signed digital objects that serve as the building blocks of a transaction. They are the language of trust exchanged between agents.</p> <p>There are three primary types of VDCs:</p>"},{"location":"topics/core-concepts/#1-the-cart-mandate-human-present","title":"1. The Cart Mandate (Human Present)","text":"<p>The Cart Mandate is the foundational credential used when the user is present to authorize a purchase. It is generated by the Merchant and cryptographically signed by the user (typically via their device), binding their identity and authorization to a specific transaction.</p> <p>A Cart Mandate contains:</p> <ul> <li>Verifiable identities for the payer and payee.</li> <li>A tokenized representation of the specific payment method.</li> <li>The final, exact transaction details (products, destination, amount,     currency).</li> <li>A container for risk-related signals.</li> </ul> Android Confirmation (current UI) Android Confirmation (coming soon)"},{"location":"topics/core-concepts/#2-the-user-signed-intent-mandate-human-not-present","title":"2. The User-Signed Intent Mandate (Human Not Present)","text":"<p>The User-Signed Intent Mandate is used for scenarios where the user is not present at the time of the transaction (e.g., \"buy these tickets when they go on sale\"). It is generated by the Shopping Agent and signed by the user, granting the agent authority to act within defined constraints.</p> <p>A User-Signed Intent Mandate contains:</p> <ul> <li>Verifiable identities for the payer and payee.</li> <li>A list or category of authorized payment methods.</li> <li>The shopping intent, including parameters like product categories, and other     criteria.</li> <li>The agent's natural language understanding of the user's prompt.</li> <li>An expiration time (Time-to-Live).</li> </ul>"},{"location":"topics/core-concepts/#3-the-payment-mandate","title":"3. The Payment Mandate","text":"<p>This is a separate VDC shared with the payment network and issuer. Its purpose is to provide visibility into the agentic nature of the transaction, helping the network and issuer build trust and assess risk. It contains signals for AI agent presence and the transaction modality (Human Present vs. Not Present).</p>"},{"location":"topics/life-of-a-transaction/","title":"Life of a Transaction","text":"<p>The Agent Payments Protocol (AP2) defines clear flows for different user scenarios. The two primary modalities are \"Human Present\" and \"Human Not Present.\"</p>"},{"location":"topics/life-of-a-transaction/#human-present-transaction","title":"Human Present Transaction","text":"<p>This journey applies when a user delegates a task to an agent and is available to authorize the final payment.</p> <p>The typical flow is as follows:</p> <ol> <li>Setup: The user may establish a connection between their preferred    Shopping Agent and a supported Credentials Provider (e.g., their digital    wallet).</li> <li>Discovery &amp; Negotiation: The user gives a shopping task to their agent.    The agent interacts with one or more merchants to assemble a cart that    satisfies the request.</li> <li>Merchant Validates Cart: The user authorizes a set of items for purchase.    The merchant signs the final cart, signaling their commitment to fulfill it.</li> <li>Provide Payment Methods: The Shopping Agent requests an applicable    payment method from the Credentials Provider.</li> <li>Show Cart: The agent presents the final, merchant-signed cart and the    selected payment method to the user in a trusted interface.</li> <li>Sign &amp; Pay: The user's approval generates a cryptographically signed    Cart Mandate, which contains the explicit details of the purchase. This    mandate is shared with the merchant as evidence. A separate Payment    Mandate is prepared for the payment network.</li> <li>Payment Execution: The payment details are conveyed to the Credentials    Provider and Merchant to complete the transaction.</li> <li>Send to Issuer: The merchant or their processor routes the transaction to    the payment network and issuer, appending the Payment Mandate to provide    visibility into the agentic nature of the transaction.</li> <li>Challenge (If Necessary): Any party (issuer, merchant, etc.) can issue a    challenge (like 3D Secure). The user must complete the challenge on a trusted    surface.</li> <li>Authorization: The issuer approves the payment, and the confirmation is     sent to the user and merchant so the order can be fulfilled.</li> </ol>"},{"location":"topics/life-of-a-transaction/#human-not-present-transaction","title":"Human Not Present Transaction","text":"<p>This journey is for scenarios where the user wants the agent to proceed with a payment in their absence (e.g., \"buy these shoes when the price drops below $100\").</p> <p>The key differences from the Human Present flow are:</p> <ol> <li>Intent is Captured: Instead of approving a final cart, the user approves    the agent's understanding of their intent. The user's in-session    authentication (e.g., biometric) creates a signed Intent Mandate.</li> <li>Intent Mandate is Used: This mandate, which includes the natural language    description of the user's goal, is shared with the merchant, who can then    decide if they can fulfill the request.</li> <li>Merchant Can Force User Confirmation: If the merchant is unsure about    their ability to fulfill the request based on the Intent Mandate, they can    require the user to return to the session to confirm details. This might    involve the user selecting from a set of final options (creating a Cart    Mandate) or providing more information (updating the Intent Mandate).</li> </ol> <p>This ensures merchants have confidence in the user's intent while still allowing for autonomous execution of tasks.</p>"},{"location":"topics/privacy-and-security/","title":"Privacy and Security","text":"<p>The Agent Payments Protocol (AP2) is designed with privacy and security as foundational pillars. By re-imagining the flow of transactions for an AI-native world, the protocol introduces new safeguards while adapting existing security measures.</p>"},{"location":"topics/privacy-and-security/#core-principles","title":"Core Principles","text":"<ul> <li> <p>User Control and Privacy by Design: The user must always be the ultimate     authority. The protocol is architected to give users granular control and     transparent visibility over their agents' financial activities. Privacy is a     core design tenet, not an afterthought. The protocol is designed to protect     sensitive user information, including conversational prompts and personal     payment details.</p> </li> <li> <p>Role-Based Architecture: A key security feature is the separation of     concerns among the different actors (Shopping Agent, Credentials Provider,     Merchant). This architecture ensures that agents involved in the shopping     and discovery process are prevented from accessing sensitive payment card     industry (PCI) data or other personally identifiable information (PII). This     sensitive data is handled exclusively by specialized entities like the     Credentials Provider and the secure elements of the existing payment     infrastructure.</p> </li> </ul>"},{"location":"topics/privacy-and-security/#a-new-risk-landscape","title":"A New Risk Landscape","text":"<p>The shift from direct human interaction to delegated agentic payments introduces new risk factors that the protocol is designed to mitigate over time. All participants in the ecosystem must re-evaluate how they establish trust and manage risk. Key considerations include:</p> <ul> <li>User Asynchronicity: The user may not be present for the entire payment     journey, requiring robust, verifiable mandates to stand in for their     real-time approval.</li> <li>Delegated Trust: Actors must now trust an agent to initiate a payment on     a user's behalf, making the verification of the agent's identity and     authority critical.</li> <li>Indirect Trust Establishment: The Credentials Provider may not have a     direct relationship with the merchant and must rely on the Shopping Agent to     bridge that trust gap securely.</li> <li>Agent Identity: The Shopping Agent's identity becomes a new, critical     signal for fraud and risk analysis, requiring new methods of verification.</li> </ul> <p>The protocol provides a common language for sharing risk signals between entities, allowing for a more holistic and secure assessment of each transaction. Existing risk systems that merchants, networks, and issuers have in place can be augmented with new data points from the agentic flow, such as the <code>PaymentMandate</code>, ensuring backward compatibility and enhancing security.</p>"},{"location":"topics/what-is-ap2/","title":"AP2 Overview","text":"<p>The evolution of digital interaction is entering a new phase, moving beyond direct human interaction with websites and apps to conversational and delegated task execution by AI agents. In commerce, this means agents will manage everything from routine purchases to complex product research and price negotiation.</p> <p>This new era of agentic commerce promises a hyper-personalized and frictionless shopping experience for users while providing merchants with new, intelligent channels to reach customers.</p>"},{"location":"topics/what-is-ap2/#the-foundational-gap-a-crisis-of-trust","title":"The Foundational Gap: A Crisis of Trust","text":"<p>Despite its promise, the rise of agentic commerce exposes a critical vulnerability: today's payment systems were designed for direct human interaction. When an autonomous agent initiates a payment, fundamental questions arise that current systems cannot answer:</p> <ul> <li>Authorization &amp; Auditability: What verifiable proof exists that the user     granted the agent specific authority to make a particular purchase?</li> <li>Authenticity of Intent: How can a merchant be certain that an agent's     request accurately reflects the user's true intent, free from errors or AI     \"hallucinations\"?</li> <li>Accountability: In the event of a fraudulent or erroneous transaction,     who is accountable? The user, the agent's developer, the merchant, or the     payment network?</li> </ul> <p>This ambiguity creates a crisis of trust that could hinder adoption, expose merchants to fraud, and lead users to hesitate before delegating financial authority to agents.</p>"},{"location":"topics/what-is-ap2/#the-risk-of-a-fragmented-ecosystem","title":"The Risk of a Fragmented Ecosystem","text":"<p>Without a common standard, the industry risks developing a patchwork of proprietary, closed-loop solutions. This would create a confusing experience for users, high integration costs for merchants (especially small businesses), and prevent the payments ecosystem from consistently mitigating fraud.</p>"},{"location":"topics/what-is-ap2/#the-solution-an-open-interoperable-protocol","title":"The Solution: An Open, Interoperable Protocol","text":"<p>The Agent Payments Protocol (AP2) is proposed as a non-proprietary, open extension for existing agent-to-agent (A2A) and model-context (MCP) protocols.</p> <p>It creates a common, trusted language for all participants, ensuring that any compliant agent can securely transact with any compliant merchant. By establishing a secure and reliable framework for AI-driven commerce, AP2 paves the way for a competitive and innovative marketplace.</p> <p></p>"}]}